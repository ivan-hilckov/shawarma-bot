# Альтернативный Dockerfile для диагностики проблем сборки
FROM node:18-alpine

# Устанавливаем wget для healthcheck
RUN apk add --no-cache wget

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем package.json и package-lock.json
COPY package*.json ./

# Устанавливаем зависимости
RUN npm ci

# Копируем tsconfig.json отдельно
COPY tsconfig.json ./

# Копируем исходный код
COPY src/ ./src/

# Проверяем что все файлы на месте
RUN echo "=== Проверка файлов перед сборкой ==="
RUN ls -la
RUN ls -la src/
RUN ls -la src/api/
RUN cat tsconfig.json

# Устанавливаем TypeScript глобально для диагностики
RUN npm install -g typescript

# Проверяем версию TypeScript
RUN tsc --version

# Пробуем собрать с помощью tsc напрямую
RUN echo "=== Сборка с помощью tsc ==="
RUN tsc --project . --listFiles

# Проверяем результат
RUN echo "=== Результат сборки ==="
RUN ls -la dist/
RUN ls -la dist/api/

# Копируем остальные файлы если нужно
COPY . .

# Удаляем dev зависимости
RUN npm prune --production

# Создаем пользователя
RUN addgroup -g 1001 -S nodejs
RUN adduser -S botuser -u 1001
RUN chown -R botuser:nodejs /app
USER botuser

EXPOSE 3000

CMD ["npm", "start"]
