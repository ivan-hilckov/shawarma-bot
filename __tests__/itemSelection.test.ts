import { handleItemSelection } from '../src/handlers';
import { BotInstance, BotCallbackQuery } from '../src/types';

// –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª–∏
jest.mock('../src/menu', () => ({
  getItemById: jest.fn(),
}));

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ –º–æ–∫–∞–µ–º api-client —Å default export
jest.mock('../src/api-client', () => ({
  default: {
    getCart: jest.fn(),
    getCartTotal: jest.fn(),
  },
}));

jest.mock('../src/database', () => ({
  default: {
    isInFavorites: jest.fn(),
  },
}));

jest.mock('../src/config', () => ({
  default: {
    ASSETS_BASE_URL: 'https://botgarden.store/assets',
  },
}));

describe('Item Selection Handler', () => {
  let mockBot: jest.Mocked<BotInstance>;
  let mockQuery: BotCallbackQuery;

  beforeEach(() => {
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–∫–æ–≤
    jest.clearAllMocks();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫-–±–æ—Ç–∞
    mockBot = {
      answerCallbackQuery: jest.fn().mockResolvedValue({}),
      sendPhoto: jest.fn().mockResolvedValue({}),
      sendMessage: jest.fn().mockResolvedValue({}),
      editMessageText: jest.fn().mockResolvedValue({}),
    } as any;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫-query
    mockQuery = {
      id: 'callback_123',
      from: {
        id: 123456,
        first_name: 'TestUser',
        is_bot: false,
      },
      data: 'item_1',
      message: {
        chat: { id: 789, type: 'private' },
        message_id: 456,
        date: Date.now(),
      },
    } as BotCallbackQuery;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ –º–æ–¥—É–ª–µ–π
    const { getItemById } = require('../src/menu');
    getItemById.mockReturnValue({
      id: '1',
      name: '–¢–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞',
      price: 250,
      description: '–í–∫—É—Å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞',
      category: 'shawarma',
      photo: 'assets/test-shawarma.jpg',
    });

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è default export
    const botApiClient = require('../src/api-client').default;
    botApiClient.getCart.mockResolvedValue([]);
    botApiClient.getCartTotal.mockResolvedValue({ total: 0, itemsCount: 0 });

    const databaseService = require('../src/database').default;
    databaseService.isInFavorites.mockResolvedValue(false);
  });

  test('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback query –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞', async () => {
    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ callback query
    expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback_123', {
      text: '–ó–∞–≥—Ä—É–∂–∞–µ–º –¢–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞...',
    });
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ', async () => {
    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ
    expect(mockBot.sendPhoto).toHaveBeenCalledWith(
      789,
      'https://botgarden.store/assets/test-shawarma.jpg',
      expect.objectContaining({
        caption: expect.stringContaining('–¢–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞'),
        reply_markup: expect.objectContaining({
          inline_keyboard: expect.any(Array),
        }),
      })
    );
  });

  test('–¥–æ–ª–∂–µ–Ω fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    mockBot.sendPhoto.mockRejectedValue(new Error('Photo upload failed'));

    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    expect(mockBot.sendPhoto).toHaveBeenCalled();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ fallback —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    expect(mockBot.sendMessage).toHaveBeenCalledWith(
      789,
      expect.stringContaining('üì∏'),
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          inline_keyboard: expect.any(Array),
        }),
      })
    );
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ñ–æ—Ç–æ', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ —Ñ–æ—Ç–æ
    const { getItemById } = require('../src/menu');
    getItemById.mockReturnValue({
      id: '8',
      name: '–ö–æ–ª–∞',
      price: 100,
      description: '–û—Å–≤–µ–∂–∞—é—â–∞—è Coca-Cola',
      category: 'drinks',
      // –Ω–µ—Ç –ø–æ–ª—è photo
    });

    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    expect(mockBot.sendPhoto).not.toHaveBeenCalled();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    expect(mockBot.sendMessage).toHaveBeenCalledWith(
      789,
      expect.stringContaining('–ö–æ–ª–∞'),
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          inline_keyboard: expect.any(Array),
        }),
      })
    );
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const botApiClient = require('../src/api-client').default;
    botApiClient.getCart.mockResolvedValue([
      {
        menuItem: { id: '1', name: '–¢–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞', price: 250 },
        quantity: 2,
      },
    ]);

    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
    const sentMessage =
      mockBot.sendPhoto.mock.calls[0]?.[2]?.caption || mockBot.sendMessage.mock.calls[0]?.[1];

    expect(sentMessage).toContain('–í –∫–æ—Ä–∑–∏–Ω–µ: 2 —à—Ç. (500‚ÇΩ)');
  });

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ–≤–∞—Ä–∞
    const { getItemById } = require('../src/menu');
    getItemById.mockReturnValue(undefined);

    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π
    expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback_123', {
      text: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    expect(mockBot.sendPhoto).not.toHaveBeenCalled();
    expect(mockBot.sendMessage).not.toHaveBeenCalled();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ chatId', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ chatId
    const queryWithoutChat = {
      ...mockQuery,
      message: undefined,
    } as BotCallbackQuery;

    await handleItemSelection(mockBot, queryWithoutChat);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π
    expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback_123', {
      text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
    });
  });

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ–º', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ API –∫–ª–∏–µ–Ω—Ç–µ
    const botApiClient = require('../src/api-client').default;
    botApiClient.getCart.mockRejectedValue(new Error('Database connection failed'));

    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ callback query
    expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback_123', {
      text: '–ó–∞–≥—Ä—É–∂–∞–µ–º –¢–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞...',
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(mockBot.sendMessage).toHaveBeenCalledWith(
      789,
      expect.stringContaining('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ "–¢–µ—Å—Ç–æ–≤–∞—è —à–∞—É—Ä–º–∞"'),
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'back_to_menu' }]],
        }),
      })
    );
  });

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å URL –¥–ª—è —Ñ–æ—Ç–æ', async () => {
    await handleItemSelection(mockBot, mockQuery);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (—É–±—Ä–∞–ª –ª–∏—à–Ω–∏–π assets/)
    expect(mockBot.sendPhoto).toHaveBeenCalledWith(
      789,
      'https://botgarden.store/assets/test-shawarma.jpg',
      expect.any(Object)
    );
  });
});
