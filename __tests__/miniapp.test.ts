/**
 * –¢–µ—Å—Ç—ã –¥–ª—è Telegram Mini App —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
 * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ª–æ–≥–∏–∫—É JavaScript —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ public/index.html
 */

// –ú–æ–∫–∞–µ–º Telegram WebApp –æ–±—ä–µ–∫—Ç
const mockTelegramWebApp = {
  ready: jest.fn(),
  expand: jest.fn(),
  themeParams: {
    bg_color: '#ffffff',
    text_color: '#333333',
    button_color: '#007AFF',
    button_text_color: '#ffffff',
    secondary_bg_color: '#f8f8f8',
    hint_color: '#999999',
    link_color: '#0066CC',
  },
  initDataUnsafe: {
    user: {
      id: 123456,
      first_name: 'TestUser',
      username: 'testuser',
      is_premium: false,
    },
  },
  showAlert: jest.fn(),
  onEvent: jest.fn(),
};

// –ú–æ–∫–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const createMockElement = () => ({
  classList: {
    add: jest.fn(),
    remove: jest.fn(),
  },
  innerHTML: '',
});

const createMockDocument = () => ({
  documentElement: {
    style: {
      setProperty: jest.fn(),
    },
  },
  querySelectorAll: jest.fn(),
  getElementById: jest.fn(),
  addEventListener: jest.fn(),
});

describe('Telegram Mini App', () => {
  let mockDocument: any;

  beforeEach(() => {
    jest.clearAllMocks();
    mockDocument = createMockDocument();
  });

  describe('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å ready() –∏ expand() –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const tg = mockTelegramWebApp;

      if (tg) {
        tg.ready();
        tg.expand();
      }

      expect(mockTelegramWebApp.ready).toHaveBeenCalled();
      expect(mockTelegramWebApp.expand).toHaveBeenCalled();
    });

    test('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã', () => {
      const tg = mockTelegramWebApp;
      const documentElement = mockDocument.documentElement;

      if (tg) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color);
        documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color);
      }

      expect(documentElement.style.setProperty).toHaveBeenCalledWith(
        '--tg-theme-bg-color',
        '#ffffff'
      );
      expect(documentElement.style.setProperty).toHaveBeenCalledWith(
        '--tg-theme-text-color',
        '#333333'
      );
    });
  });

  describe('–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏', () => {
    test('showPage –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', () => {
      const mockPages = [createMockElement(), createMockElement()];
      const mockButtons = [createMockElement(), createMockElement()];
      const mockTargetPage = createMockElement();

      mockDocument.querySelectorAll.mockImplementation((selector: string) => {
        if (selector === '.page') return mockPages;
        if (selector === '.nav-button') return mockButtons;
        return [];
      });

      mockDocument.getElementById.mockReturnValue(mockTargetPage);

      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é showPage –∏–∑ index.html
      const showPage = (pageId: string, document: any) => {
        const pages = document.querySelectorAll('.page');
        const buttons = document.querySelectorAll('.nav-button');

        pages.forEach((page: any) => page.classList.remove('active'));
        buttons.forEach((btn: any) => btn.classList.remove('active'));

        const targetPage = document.getElementById(pageId);
        if (targetPage) {
          targetPage.classList.add('active');
        }

        const activeButtonIndex = pageId === 'page-main' ? 0 : 1;
        if (buttons[activeButtonIndex]) {
          buttons[activeButtonIndex].classList.add('active');
        }
      };

      showPage('page-orders', mockDocument);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ä—è—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
      mockPages.forEach((page: any) => {
        expect(page.classList.remove).toHaveBeenCalledWith('active');
      });

      mockButtons.forEach((btn: any) => {
        expect(btn.classList.remove).toHaveBeenCalledWith('active');
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
      expect(mockTargetPage.classList.add).toHaveBeenCalledWith('active');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
      expect(mockButtons[1]?.classList.add).toHaveBeenCalledWith('active');
    });

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å hash routing', () => {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ hash
      const getDefaultPage = (hash: string) => {
        return hash === '#orders' ? 'page-orders' : 'page-main';
      };

      expect(getDefaultPage('#orders')).toBe('page-orders');
      expect(getDefaultPage('#main')).toBe('page-main');
      expect(getDefaultPage('')).toBe('page-main');
    });
  });

  describe('–§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', () => {
    test('testTelegramData –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
      const testTelegramData = (tg: any) => {
        if (tg) {
          const user = tg.initDataUnsafe?.user;
          const message = user
            ? `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!\n\n–¢–≤–æ–π ID: ${user.id}\nUsername: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ü—Ä–µ–º–∏—É–º: ${user.is_premium ? '–¥–∞' : '–Ω–µ—Ç'}`
            : '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';

          tg.showAlert(message);
        }
      };

      testTelegramData(mockTelegramWebApp);

      expect(mockTelegramWebApp.showAlert).toHaveBeenCalledWith(
        '–ü—Ä–∏–≤–µ—Ç, TestUser!\n\n–¢–≤–æ–π ID: 123456\nUsername: testuser\n–ü—Ä–µ–º–∏—É–º: –Ω–µ—Ç'
      );
    });

    test('testTelegramData –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
      const tgWithoutUser = {
        ...mockTelegramWebApp,
        initDataUnsafe: { user: undefined },
      };

      const testTelegramData = (tg: any) => {
        if (tg) {
          const user = tg.initDataUnsafe?.user;
          const message = user ? `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!` : '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';

          tg.showAlert(message);
        }
      };

      testTelegramData(tgWithoutUser);

      expect(tgWithoutUser.showAlert).toHaveBeenCalledWith('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    });

    test('openCategory –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å alert —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', () => {
      const openCategory = (category: string, tg: any) => {
        if (tg) {
          tg.showAlert(
            `–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category}\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤.`
          );
        }
      };

      openCategory('shawarma', mockTelegramWebApp);

      expect(mockTelegramWebApp.showAlert).toHaveBeenCalledWith(
        '–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: shawarma\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤.'
      );
    });
  });

  describe('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤', () => {
    test('loadOrders –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤', () => {
      const mockOrdersList = createMockElement();
      mockDocument.getElementById.mockReturnValue(mockOrdersList);

      const loadOrders = (document: any) => {
        const ordersList = document.getElementById('orders-list');

        if (ordersList) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          ordersList.innerHTML =
            '<div style="text-align: center; padding: 20px;">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        }
      };

      loadOrders(mockDocument);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      expect(mockOrdersList.innerHTML).toContain('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...');
    });

    test('getStatusText –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞', () => {
      const getStatusText = (status: string) => {
        const statusMap: { [key: string]: string } = {
          pending: '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
          confirmed: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          preparing: 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
          ready: 'üéâ –ì–æ—Ç–æ–≤',
          delivered: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        };
        return statusMap[status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      };

      expect(getStatusText('pending')).toBe('‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏');
      expect(getStatusText('confirmed')).toBe('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
      expect(getStatusText('unknown')).toBe('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    });
  });

  describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç–µ–º—ã', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã', () => {
      const tg = mockTelegramWebApp;

      if (tg) {
        tg.onEvent('themeChanged', () => {
          console.log('–¢–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å');
        });
      }

      expect(mockTelegramWebApp.onEvent).toHaveBeenCalledWith('themeChanged', expect.any(Function));
    });
  });
});
