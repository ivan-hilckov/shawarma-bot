import NotificationService from '../src/notifications';
import { BotInstance, Order } from '../src/types';

// –ú–æ–∫–∞–µ–º config
jest.mock('../src/config', () => ({
  NOTIFICATIONS_CHAT_ID: '-1001234567890',
  ADMIN_USER_IDS: '123456789,987654321',
}));

describe('NotificationService', () => {
  let mockBot: jest.Mocked<BotInstance>;
  let notificationService: NotificationService;
  let mockOrder: Order;

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
    mockBot = {
      sendMessage: jest.fn().mockResolvedValue({}),
    } as any;

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    notificationService = new NotificationService(mockBot);

    // –ú–æ–∫–∞–µ–º console.log –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    jest.spyOn(console, 'log').mockImplementation();
    jest.spyOn(console, 'error').mockImplementation();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    mockOrder = {
      id: '123',
      userId: 456,
      userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      items: [
        {
          menuItem: {
            id: '1',
            name: '–®–∞—É—Ä–º–∞ –∫–ª–∞—Å—Å–∏–∫',
            description: '–í–∫—É—Å–Ω–∞—è —à–∞—É—Ä–º–∞',
            price: 250,
            category: 'shawarma' as const,
          },
          quantity: 2,
        },
      ],
      totalPrice: 500,
      status: 'pending' as const,
      createdAt: new Date('2024-01-15T12:00:00Z'),
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
    jest.restoreAllMocks();
  });

  describe('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π', () => {
      expect(notificationService.isConfigured()).toBe(true);
      expect(notificationService.isAdmin(123456789)).toBe(true);
      expect(notificationService.isAdmin(987654321)).toBe(true);
      expect(notificationService.isAdmin(999999999)).toBe(false);
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å', () => {
      const status = notificationService.getStatus();
      expect(status).toContain('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      expect(status).toContain('–ö–∞–Ω–∞–ª: -1001234567890');
      expect(status).toContain('–ê–¥–º–∏–Ω–æ–≤: 2');
    });
  });

  describe('notifyNewOrder', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –∫–∞–Ω–∞–ª', async () => {
      await notificationService.notifyNewOrder(mockOrder);

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        '-1001234567890',
        expect.stringContaining('üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å' }),
                expect.objectContaining({ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å' }),
              ]),
            ]),
          }),
        })
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', async () => {
      await notificationService.notifyNewOrder(mockOrder);

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>'),
        expect.any(Object)
      );

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        987654321,
        expect.stringContaining('üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>'),
        expect.any(Object)
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ', async () => {
      await notificationService.notifyNewOrder(mockOrder);

      const sentMessage = (mockBot.sendMessage as jest.Mock).mock.calls[0][1];
      expect(sentMessage).toContain('–ó–∞–∫–∞–∑: #123');
      expect(sentMessage).toContain('–ö–ª–∏–µ–Ω—Ç: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      expect(sentMessage).toContain('–®–∞—É—Ä–º–∞ –∫–ª–∞—Å—Å–∏–∫');
      expect(sentMessage).toContain('250‚ÇΩ √ó 2 = <b>500‚ÇΩ</b>');
      expect(sentMessage).toContain('–û–±—â–∞—è —Å—É–º–º–∞: 500‚ÇΩ');
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏', async () => {
      mockBot.sendMessage.mockRejectedValue(new Error('–û—à–∏–±–∫–∞ API'));

      await expect(notificationService.notifyNewOrder(mockOrder)).resolves.not.toThrow();
      expect(console.error).toHaveBeenCalledWith(
        expect.stringContaining('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
        expect.any(Error)
      );
    });
  });

  describe('notifyStatusChange', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', async () => {
      const updatedOrder = { ...mockOrder, status: 'confirmed' as const };

      await notificationService.notifyStatusChange(updatedOrder, 'pending');

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        '-1001234567890',
        expect.stringContaining('üîÑ <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω</b>'),
        expect.objectContaining({ parse_mode: 'HTML' })
      );

      const sentMessage = (mockBot.sendMessage as jest.Mock).mock.calls[0][1];
      expect(sentMessage).toContain('‚è≥ ‚Üí ‚úÖ');
      expect(sentMessage).toContain('–í –æ–∂–∏–¥–∞–Ω–∏–∏ ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', async () => {
      const updatedOrder = { ...mockOrder, status: 'preparing' as const };

      await notificationService.notifyStatusChange(updatedOrder, 'confirmed');

      expect(mockBot.sendMessage).toHaveBeenCalledTimes(3); // –∫–∞–Ω–∞–ª + 2 –∞–¥–º–∏–Ω–∞
    });
  });

  describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', () => {
      expect(notificationService.isAdmin(123456789)).toBe(true);
      expect(notificationService.isAdmin(987654321)).toBe(true);
      expect(notificationService.isAdmin(111111111)).toBe(false);
    });
  });

  describe('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞', () => {
      expect(notificationService.isConfigured()).toBe(true);
    });
  });

  describe('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      notificationService.notifyNewOrder(mockOrder);

      const sentMessage = (mockBot.sendMessage as jest.Mock).mock.calls[0][1];
      expect(sentMessage).toContain('15.01.2024'); // –î–∞—Ç–∞ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å emoji —Å—Ç–∞—Ç—É—Å–æ–≤', () => {
      const testStatuses = [
        { status: 'pending', emoji: '‚è≥' },
        { status: 'confirmed', emoji: '‚úÖ' },
        { status: 'preparing', emoji: 'üë®‚Äçüç≥' },
        { status: 'ready', emoji: 'üéâ' },
        { status: 'delivered', emoji: '‚úÖ' },
      ];

      testStatuses.forEach(({ status, emoji }) => {
        const order = { ...mockOrder, status: status as any };
        notificationService.notifyNewOrder(order);

        const sentMessage = (mockBot.sendMessage as jest.Mock).mock.lastCall[1];
        expect(sentMessage).toContain(emoji);
      });
    });
  });

  describe('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏', async () => {
      await notificationService.notifyNewOrder(mockOrder);

      const keyboard = (mockBot.sendMessage as jest.Mock).mock.calls[0][2].reply_markup;
      expect(keyboard.inline_keyboard).toEqual([
        [
          { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'admin_confirm_123' },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'admin_reject_123' },
        ],
        [
          { text: 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', callback_data: 'admin_preparing_123' },
          { text: 'üéâ –ì–æ—Ç–æ–≤–æ', callback_data: 'admin_ready_123' },
        ],
        [{ text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: 'admin_details_123' }],
      ]);
    });
  });

  describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –ø–∞—Ä—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      expect(notificationService.isAdmin(123456789)).toBe(true);
      expect(notificationService.isAdmin(987654321)).toBe(true);
      expect(notificationService.isAdmin(999999999)).toBe(false);
    });
  });
});
