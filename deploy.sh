#!/bin/bash
set -e

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è tar –∞—Ä—Ö–∏–≤–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π macOS
create_tar() {
    local archive_name="$1"
    local source_dir="$2"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–° –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - –ø–æ–¥–∞–≤–ª—è–µ–º extended attributes
        tar --no-xattrs -czf "$archive_name" "$source_dir"
    else
        # Linux - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        tar -czf "$archive_name" "$source_dir"
    fi
}

echo "üöÄ –î–µ–ø–ª–æ–π –®–∞—É—Ä–º–∞ –ë–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "package.json" ] || [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if [ -f ".env.production" ]; then
    echo "üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env.production..."
    export $(grep -v '^#' .env.production | xargs)
elif [ -f ".env" ]; then
    echo "üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env..."
    export $(grep -v '^#' .env | xargs)
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑ env –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
if [ -n "$DEPLOY_SERVER_HOST" ]; then
    SERVER_HOST="$DEPLOY_SERVER_HOST"
    echo "‚úÖ –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ .env: $SERVER_HOST"
else
    read -p "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (IP –∏–ª–∏ –¥–æ–º–µ–Ω): " SERVER_HOST
fi

if [ -n "$DEPLOY_SERVER_PORT" ]; then
    SERVER_PORT="$DEPLOY_SERVER_PORT"
    echo "‚úÖ –ü–æ—Ä—Ç SSH –∏–∑ .env: $SERVER_PORT"
else
    read -p "–í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç [22]: " SERVER_PORT
    SERVER_PORT=${SERVER_PORT:-22}
fi

if [ -n "$DEPLOY_SERVER_USER" ]; then
    SERVER_USER="$DEPLOY_SERVER_USER"
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ .env: $SERVER_USER"
else
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " SERVER_USER
fi

if [ -n "$DEPLOY_SERVER_PATH" ]; then
    SERVER_PATH="$DEPLOY_SERVER_PATH"
    echo "‚úÖ –ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ .env: $SERVER_PATH"
else
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ [~/shawarma-bot]: " SERVER_PATH
    SERVER_PATH=${SERVER_PATH:-~/shawarma-bot}
fi

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ—Ä—Ç–æ–º
SSH_CMD="ssh -p $SERVER_PORT"
SCP_CMD="scp -P $SERVER_PORT"

echo ""
echo "üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è:"
echo "–°–µ—Ä–≤–µ—Ä: $SERVER_USER@$SERVER_HOST:$SERVER_PORT"
echo "–ü—É—Ç—å: $SERVER_PATH"
echo ""

read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/N): " CONFIRM
if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "‚ùå –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
if ! $SSH_CMD -o ConnectTimeout=10 -o BatchMode=yes $SERVER_USER@$SERVER_HOST exit 2>/dev/null; then
    echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ SSH"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    exit 1
fi
echo "‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞..."
if ! $SSH_CMD $SERVER_USER@$SERVER_HOST "[ -d $SERVER_PATH/.git ]"; then
    echo "‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    echo ""
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞? (y/N): " AUTO_SETUP
    if [[ $AUTO_SETUP =~ ^[Yy]$ ]]; then
        echo "üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞..."

        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        $SCP_CMD setup-server.sh $SERVER_USER@$SERVER_HOST:~/

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        $SSH_CMD $SERVER_USER@$SERVER_HOST "chmod +x ~/setup-server.sh && ~/setup-server.sh"

        echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        echo "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π..."
        echo ""
    else
        echo "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞: ./setup-server.sh"
        exit 1
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -d "assets" ] && [ "$(ls assets/*.jpeg 2>/dev/null | wc -l)" -gt 0 ]; then
    echo "üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    create_tar assets-backup.tar.gz assets/
    ASSETS_SIZE=$(du -h assets-backup.tar.gz | cut -f1)
    echo "‚úÖ –ê—Ä—Ö–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω: $ASSETS_SIZE"
    UPLOAD_ASSETS=true
else
    echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ assets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"
    UPLOAD_ASSETS=false
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
if [ -f ".env.production" ]; then
    echo "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.production –∫–∞–∫ .env..."
    $SCP_CMD .env.production $SERVER_USER@$SERVER_HOST:$SERVER_PATH/.env
elif [ -f ".env" ]; then
    echo "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    $SCP_CMD .env $SERVER_USER@$SERVER_HOST:$SERVER_PATH/
elif [ -f "docker.env.example" ]; then
    echo "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ docker.env.example –∫–∞–∫ .env..."
    $SCP_CMD docker.env.example $SERVER_USER@$SERVER_HOST:$SERVER_PATH/.env
else
    echo "‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ "$UPLOAD_ASSETS" = true ]; then
    echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
    $SCP_CMD assets-backup.tar.gz $SERVER_USER@$SERVER_HOST:$SERVER_PATH/
    echo "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
fi

# –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
$SSH_CMD $SERVER_USER@$SERVER_HOST << EOF
set -e
cd $SERVER_PATH

echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
git fetch origin

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É (main –∏–ª–∏ master)
if git show-ref --verify --quiet refs/remotes/origin/main; then
    MAIN_BRANCH="main"
elif git show-ref --verify --quiet refs/remotes/origin/master; then
    MAIN_BRANCH="master"
else
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ç–∫–∞ main –∏–ª–∏ master"
    exit 1
fi

echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É \$MAIN_BRANCH..."
git checkout \$MAIN_BRANCH
git reset --hard origin/\$MAIN_BRANCH
echo "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ç–∫–∏ \$MAIN_BRANCH"

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
if [ -f "assets-backup.tar.gz" ]; then
    echo "üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."

    # –ë—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if [ -d "assets" ]; then
        tar -czf assets-backup-old-\$(date +%Y%m%d_%H%M%S).tar.gz assets/
    fi

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    tar -xzf assets-backup.tar.gz
    chmod 644 assets/*.jpeg 2>/dev/null || true
    rm assets-backup.tar.gz

    IMAGES_COUNT=\$(ls assets/*.jpeg 2>/dev/null | wc -l)
    echo "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: \$IMAGES_COUNT —Ñ–∞–π–ª–æ–≤"
fi

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down
docker-compose build --no-cache
docker-compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
if docker-compose ps | grep -q "shawarma-bot.*Up"; then
    echo "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
    echo "–õ–æ–≥–∏:"
    docker-compose logs --tail=20 bot
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
if docker-compose ps | grep -q "postgres.*Up"; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    MENU_COUNT=\$(docker exec shawarma-postgres psql -U shawarma_user -d shawarma_db -t -c "SELECT COUNT(*) FROM menu_items;" 2>/dev/null | tr -d ' ' || echo "0")
    echo "üìä –ü–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: \$MENU_COUNT"
else
    echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
fi

echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
EOF

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
if [ "$UPLOAD_ASSETS" = true ]; then
    rm assets-backup.tar.gz
    echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω"
fi

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ Telegram"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && docker-compose logs -f bot'"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./health-check.sh'"
echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "$SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && docker-compose ps'"
echo "$SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && docker-compose logs bot'"
echo "$SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && docker-compose restart bot'"
