#!/bin/bash
set -e

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è tar –∞—Ä—Ö–∏–≤–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π macOS
create_tar() {
    local archive_name="$1"
    local source_dir="$2"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        tar --no-xattrs -czf "$archive_name" "$source_dir"
    else
        tar -czf "$archive_name" "$source_dir"
    fi
}

echo "üöÄ –î–µ–ø–ª–æ–π –®–∞—É—Ä–º–∞ –ë–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "package.json" ] || [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–æ–≤
if [ -f ".env.production" ]; then
    echo "üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env.production..."
    export $(grep -v '^#' .env.production | xargs)
elif [ -f ".env" ]; then
    echo "üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env..."
    export $(grep -v '^#' .env | xargs)
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
if [ -n "$DEPLOY_SERVER_HOST" ]; then
    SERVER_HOST="$DEPLOY_SERVER_HOST"
    SERVER_PORT="$DEPLOY_SERVER_PORT"
    SERVER_USER="$DEPLOY_SERVER_USER"
    SERVER_PATH="$DEPLOY_SERVER_PATH"
    echo "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ .env"
else
    read -p "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: " SERVER_HOST
    read -p "–í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç [22]: " SERVER_PORT
    SERVER_PORT=${SERVER_PORT:-22}
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " SERVER_USER
    read -p "–ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ [~/shawarma-bot]: " SERVER_PATH
    SERVER_PATH=${SERVER_PATH:-~/shawarma-bot}
fi

SSH_CMD="ssh -p $SERVER_PORT"
SCP_CMD="scp -P $SERVER_PORT"

echo ""
echo "üîç –î–µ–ø–ª–æ–π: $SERVER_USER@$SERVER_HOST:$SERVER_PORT ‚Üí $SERVER_PATH"
echo ""

read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " CONFIRM
if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH..."
if ! $SSH_CMD -o ConnectTimeout=10 -o BatchMode=yes $SERVER_USER@$SERVER_HOST exit 2>/dev/null; then
    echo "‚ùå SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if ! $SSH_CMD $SERVER_USER@$SERVER_HOST "[ -d $SERVER_PATH/.git ]"; then
    echo "‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞? (y/N): " AUTO_SETUP
    if [[ $AUTO_SETUP =~ ^[Yy]$ ]]; then
        $SCP_CMD setup-server.sh $SERVER_USER@$SERVER_HOST:~/
        $SSH_CMD $SERVER_USER@$SERVER_HOST "chmod +x ~/setup-server.sh && ~/setup-server.sh"
    else
        exit 1
    fi
fi

# –ê—Ä—Ö–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if [ -d "assets" ] && [ "$(ls assets/*.jpeg 2>/dev/null | wc -l)" -gt 0 ]; then
    echo "üì∏ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    create_tar assets-backup.tar.gz assets/
    UPLOAD_ASSETS=true
else
    UPLOAD_ASSETS=false
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..."
if [ -f ".env.production" ]; then
    $SCP_CMD .env.production $SERVER_USER@$SERVER_HOST:$SERVER_PATH/.env
elif [ -f ".env" ]; then
    $SCP_CMD .env $SERVER_USER@$SERVER_HOST:$SERVER_PATH/
fi

if [ "$UPLOAD_ASSETS" = true ]; then
    $SCP_CMD assets-backup.tar.gz $SERVER_USER@$SERVER_HOST:$SERVER_PATH/
fi

# –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
$SSH_CMD $SERVER_USER@$SERVER_HOST << EOF
set -e
cd $SERVER_PATH

echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
git fetch origin
MAIN_BRANCH=\$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
git checkout \$MAIN_BRANCH
git reset --hard origin/\$MAIN_BRANCH
git pull --all

# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if [ -f "assets-backup.tar.gz" ]; then
    echo "üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    [ -d "assets" ] && tar -czf assets-backup-old-\$(date +%Y%m%d_%H%M%S).tar.gz assets/
    tar -xzf assets-backup.tar.gz
    chmod 644 assets/*.jpeg 2>/dev/null || true
    rm assets-backup.tar.gz

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
    ls -t assets-backup-old-*.tar.gz 2>/dev/null | tail -n +4 | xargs rm -f 2>/dev/null || true
fi

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫..."
docker-compose down
docker-compose build --no-cache
docker-compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ..."
sleep 15

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞..."
docker-compose ps

if docker-compose ps | grep -q "shawarma-.*Up.*Up"; then
    echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
else
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º"
    docker-compose logs --tail=10
    exit 1
fi

echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
EOF

# –û—á–∏—Å—Ç–∫–∞
[ "$UPLOAD_ASSETS" = true ] && rm assets-backup.tar.gz

echo ""
echo "üéâ –ì–æ—Ç–æ–≤–æ!"
echo "üîß –ö–æ–º–∞–Ω–¥—ã:"
echo "  –õ–æ–≥–∏: $SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && docker-compose logs -f'"
echo "  –°—Ç–∞—Ç—É—Å: $SSH_CMD $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./health-check.sh'"
