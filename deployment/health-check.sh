#!/bin/bash

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –®–∞—É—Ä–º–∞ –ë–æ—Ç–∞ v2.4..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üì¶ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

echo ""
echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
echo "üåê API Server:"
if docker-compose ps | grep -q "shawarma-api.*Up"; then
    echo "‚úÖ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
        echo "‚úÖ API health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å API
        API_STATUS=$(curl -s http://localhost:3000/api/health | jq -r '.status' 2>/dev/null || echo "unknown")
        echo "üìä API —Å—Ç–∞—Ç—É—Å: $API_STATUS"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Swagger UI
        if curl -s http://localhost:3000/api/docs > /dev/null 2>&1; then
            echo "‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:3000/api/docs"
        else
            echo "‚ö†Ô∏è Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        echo "‚ùå API health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
else
    echo "‚ùå API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
echo ""
echo "ü§ñ Telegram Bot:"
if docker-compose ps | grep -q "shawarma-bot.*Up"; then
    echo "‚úÖ –ë–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    BOT_ERRORS=$(docker-compose logs --tail=50 bot 2>/dev/null | grep -i "error\|failed\|exception" | wc -l)
    if [ "$BOT_ERRORS" -eq 0 ]; then
        echo "‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞"
    else
        echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $BOT_ERRORS –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ API
    API_CONNECTION=$(docker-compose logs --tail=20 bot 2>/dev/null | grep -i "api.*connect\|api.*health" | tail -1)
    if [ ! -z "$API_CONNECTION" ]; then
        echo "üì° –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: $API_CONNECTION"
    fi
else
    echo "‚ùå –ë–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
echo ""
echo "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
if docker-compose ps | grep -q "shawarma-postgres.*Up"; then
    echo "‚úÖ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:"
    docker exec shawarma-postgres psql -U shawarma_user -d shawarma_db -c "
    SELECT
      'Categories: ' || COUNT(*) as stat FROM categories
    UNION ALL
    SELECT
      'Menu items: ' || COUNT(*) FROM menu_items
    UNION ALL
    SELECT
      'Orders: ' || COUNT(*) FROM orders
    UNION ALL
    SELECT
      'Users: ' || COUNT(*) FROM users;
    " 2>/dev/null || echo "‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
else
    echo "‚ùå PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
echo ""
echo "üî¥ Redis:"
if docker-compose ps | grep -q "shawarma-redis.*Up"; then
    echo "‚úÖ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    REDIS_INFO=$(docker exec shawarma-redis redis-cli info server 2>/dev/null | grep "redis_version" || echo "")
    if [ ! -z "$REDIS_INFO" ]; then
        echo "üìä $REDIS_INFO"
    else
        echo "‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis"
    fi
else
    echo "‚ùå Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
echo ""
echo "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
if [ -d "assets" ]; then
    IMAGES_COUNT=$(ls assets/*.jpeg 2>/dev/null | wc -l)
    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $IMAGES_COUNT"

    if [ $IMAGES_COUNT -eq 0 ]; then
        echo "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –º–µ–Ω—é –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–µ–∑ —Ñ–æ—Ç–æ"
    fi
else
    echo "‚ùå –ü–∞–ø–∫–∞ assets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Mini App
echo ""
echo "üì± Telegram Mini App:"
if [ -f "/var/www/shawarma-bot/public/index.html" ]; then
    echo "‚úÖ Mini App —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ nginx
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost" -H "Host: botgarden.store" | grep -q "200"; then
        echo "‚úÖ Mini App –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ nginx"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp SDK –≤ HTML
        if grep -q "telegram-web-app.js" "/var/www/shawarma-bot/public/index.html"; then
            echo "‚úÖ Telegram WebApp SDK –ø–æ–¥–∫–ª—é—á–µ–Ω"
        else
            echo "‚ö†Ô∏è Telegram WebApp SDK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML"
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if grep -q "showPage\|testTelegramData\|loadOrders" "/var/www/shawarma-bot/public/index.html"; then
            echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Mini App –Ω–∞–π–¥–µ–Ω—ã"
        else
            echo "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Mini App –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        fi
    else
        echo "‚ùå Mini App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ nginx"
    fi
else
    echo "‚ùå Mini App —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
echo ""
echo "üåê –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:"
if docker-compose ps | grep -q "shawarma-bot.*Up" && docker-compose ps | grep -q "shawarma-api.*Up"; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
    BOT_TO_API=$(docker exec shawarma-bot wget -q --spider http://api:3000/api/health 2>&1 && echo "OK" || echo "FAIL")
    echo "üîó –ë–æ—Ç ‚Üí API: $BOT_TO_API"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ API –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î
    API_TO_DB=$(docker exec shawarma-api node -e "
    const { Pool } = require('pg');
    const pool = new Pool({connectionString: process.env.DATABASE_URL});
    pool.query('SELECT 1').then(() => console.log('OK')).catch(() => console.log('FAIL')).finally(() => pool.end());
    " 2>/dev/null)
    echo "üîó API ‚Üí –ë–î: $API_TO_DB"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ API –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
    API_TO_REDIS=$(docker exec shawarma-api node -e "
    const redis = require('redis');
    const client = redis.createClient({url: process.env.REDIS_URL});
    client.connect().then(() => client.ping()).then(() => console.log('OK')).catch(() => console.log('FAIL')).finally(() => client.quit());
    " 2>/dev/null)
    echo "üîó API ‚Üí Redis: $API_TO_REDIS"
fi

echo ""
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞:"
docker-compose logs --tail=10 bot 2>/dev/null || echo "‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ API:"
docker-compose logs --tail=10 api 2>/dev/null || echo "‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
echo "üéØ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "- –õ–æ–≥–∏ –±–æ—Ç–∞: docker-compose logs -f bot"
echo "- –õ–æ–≥–∏ API: docker-compose logs -f api"
echo "- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
echo "- API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:3000/api/docs"
echo "- –¢–µ—Å—Ç API: curl http://localhost:3000/api/health"
echo "- –¢–µ—Å—Ç Mini App: curl -H 'Host: botgarden.store' http://localhost/"
echo "- –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx: sudo nginx -t && sudo systemctl status nginx"
