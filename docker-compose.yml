services:
  # REST API Server
  api:
    build: .
    container_name: shawarma-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://shawarma_user:shawarma_pass@postgres:5432/shawarma_db
      - REDIS_URL=redis://redis:6379
      - API_PORT=3000
      - API_HOST=0.0.0.0
      - API_PREFIX=/api
      - API_KEYS=${API_KEYS:-admin-key-dev}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - RATE_LIMIT_PUBLIC=${RATE_LIMIT_PUBLIC:-100}
      - RATE_LIMIT_ADMIN=${RATE_LIMIT_ADMIN:-1000}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-300}
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
    command: ['npm', 'run', 'start:api']
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ['CMD', 'exit', '0']
      interval: 30s
      timeout: 30s
      retries: 1
      start_period: 5s
    networks:
      - shawarma-network

  # Telegram Bot
  bot:
    build: .
    container_name: shawarma-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=postgresql://shawarma_user:shawarma_pass@postgres:5432/shawarma_db
      - REDIS_URL=redis://redis:6379
      - NOTIFICATIONS_CHAT_ID=${NOTIFICATIONS_CHAT_ID}
      - ADMIN_USER_IDS=${ADMIN_USER_IDS}
      # API Configuration for bot
      - API_BASE_URL=http://api:3000/api
      - API_TIMEOUT=10000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    healthcheck:
      test: ['CMD', 'node', '-e', 'process.exit(0)']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shawarma-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shawarma-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=shawarma_db
      - POSTGRES_USER=shawarma_user
      - POSTGRES_PASSWORD=shawarma_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5433:5432' # Изменен внешний порт на 5433 чтобы избежать конфликта
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U shawarma_user -d shawarma_db']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - shawarma-network

  # Redis (для корзины и сессий)
  redis:
    image: redis:7-alpine
    container_name: shawarma-redis
    restart: unless-stopped
    ports:
      - '6380:6379' # Изменен внешний порт на 6380 на всякий случай
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - shawarma-network

  # pgAdmin (опционально, для управления БД)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shawarma-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - '8080:80'
    depends_on:
      - postgres
    networks:
      - shawarma-network

volumes:
  postgres_data:

networks:
  shawarma-network:
    driver: bridge
