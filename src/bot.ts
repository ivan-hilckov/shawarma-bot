import TelegramBot from 'node-telegram-bot-api';

import config from './config';
import {
  handleStart,
  handleShawarmaMenu,
  handleDrinksMenu,
  handleAbout,
  handleProfile,
  handleItemSelection,
  handleBackToMenu,
  handleAddToCart,
  handleViewCart,
  handleIncreaseQuantity,
  handleDecreaseQuantity,
  handleRemoveFromCart,
  handleClearCart,
  handleCheckout,
  handleMyOrders,
  handleOrderDetails,
  handleAdminOrderAction,
  handleAboutMiniApp,
  handleBackToStart,
  handleIncreaseFromItem,
  handleDecreaseFromItem,
  handleRemoveAllFromItem,
  handleFavorites,
  handleRecommendations,
  handleAddToFavorites,
  handleRemoveFromFavorites,
} from './handlers';
import NotificationService from './notifications';
import { BotInstance, BotMessage, BotCallbackQuery } from './types';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!config.BOT_TOKEN || config.BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE') {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:');
  console.log('BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot: BotInstance = new TelegramBot(config.BOT_TOKEN, { polling: true });

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationService = new NotificationService(bot);

// –î–µ–ª–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è handlers
(global as any).notificationService = notificationService;

console.log('ü§ñ –®–∞—É—Ä–º–∞ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg: BotMessage) => {
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from?.first_name} (${msg.from?.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
  handleStart(bot, msg);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg: BotMessage) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }

  const chatId = msg.chat.id;
  const text = msg.text;

  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from?.first_name}: ${text}`);

  switch (text) {
    case 'üåØ –®–∞—É—Ä–º–∞':
      handleShawarmaMenu(bot, msg);
      break;

    case 'ü•§ –ù–∞–ø–∏—Ç–∫–∏':
      handleDrinksMenu(bot, msg);
      break;

    case '‚ÑπÔ∏è –û –Ω–∞—Å':
      handleAbout(bot, msg);
      break;

    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
      handleProfile(bot, msg);
      break;

    default:
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º)
      if (text && text.startsWith('üõí –ö–æ—Ä–∑–∏–Ω–∞')) {
        handleViewCart(bot, msg);
        break;
      }

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
      bot.sendMessage(
        chatId,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º! üòä'
      );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query: BotCallbackQuery) => {
  const data = query.data;

  console.log(`üîò Callback –æ—Ç ${query.from?.first_name}: ${data}`);

  try {
    if (data?.startsWith('item_')) {
      handleItemSelection(bot, query);
    } else if (data?.startsWith('add_to_cart_')) {
      handleAddToCart(bot, query);
    } else if (data === 'view_cart') {
      handleViewCart(bot, query);
    } else if (data?.startsWith('increase_')) {
      handleIncreaseQuantity(bot, query);
    } else if (data?.startsWith('decrease_')) {
      handleDecreaseQuantity(bot, query);
    } else if (data?.startsWith('remove_')) {
      handleRemoveFromCart(bot, query);
    } else if (data === 'clear_cart') {
      handleClearCart(bot, query);
    } else if (data === 'checkout') {
      handleCheckout(bot, query);
    } else if (data === 'profile') {
      handleProfile(bot, query);
    } else if (data === 'my_orders') {
      handleMyOrders(bot, query);
    } else if (data?.startsWith('order_details_')) {
      handleOrderDetails(bot, query);
    } else if (data?.startsWith('admin_')) {
      handleAdminOrderAction(bot, query);
    } else if (data === 'back_to_menu') {
      handleBackToMenu(bot, query);
    } else if (data === 'about_miniapp') {
      handleAboutMiniApp(bot, query);
    } else if (data === 'back_to_start') {
      handleBackToStart(bot, query);
    } else if (data?.startsWith('increase_from_item_')) {
      handleIncreaseFromItem(bot, query);
    } else if (data?.startsWith('decrease_from_item_')) {
      handleDecreaseFromItem(bot, query);
    } else if (data?.startsWith('remove_all_from_item_')) {
      handleRemoveAllFromItem(bot, query);
    } else if (data === 'favorites') {
      handleFavorites(bot, query);
    } else if (data === 'recommendations') {
      handleRecommendations(bot, query);
    } else if (data === 'add_to_favorites') {
      handleAddToFavorites(bot, query);
    } else if (data === 'remove_from_favorites') {
      handleRemoveFromFavorites(bot, query);
    } else if (data?.startsWith('add_favorite_')) {
      handleAddToFavorites(bot, query);
    } else if (data?.startsWith('remove_favorite_')) {
      handleRemoveFromFavorites(bot, query);
    } else {
      bot.answerCallbackQuery(query.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' }).catch(() => {});
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' }).catch(() => {});
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error: Error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
bot
  .getMe()
  .then(botInfo => {
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log(`ü§ñ –ò–º—è –±–æ—Ç–∞: @${botInfo.username}`);
    console.log(`üÜî ID –±–æ—Ç–∞: ${botInfo.id}`);
    console.log(`üì¢ ${notificationService.getStatus()}`);
    console.log('üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  })
  .catch((error: Error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.message);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN');
  });

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stopPolling();
  process.exit(0);
});
