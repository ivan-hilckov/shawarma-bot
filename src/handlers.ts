import { getMenuByCategory, getItemById } from "./menu";
import { BotInstance, BotMessage, BotCallbackQuery } from "./types";
import cartService from "./cart";
import databaseService from "./database";

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
export function handleStart(bot: BotInstance, msg: BotMessage): void {
  const chatId = msg.chat.id;
  const userName = msg.from?.first_name || "–î—Ä—É–≥";

  const welcomeMessage = `
ü•ô –ü—Ä–∏–≤–µ—Ç, ${userName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∞—É—Ä–º–∞ –ë–æ—Ç!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é –∏ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
  `;

  const keyboard = {
    keyboard: [
      [{ text: "üåØ –®–∞—É—Ä–º–∞" }, { text: "ü•§ –ù–∞–ø–∏—Ç–∫–∏" }],
      [{ text: "üõí –ö–æ—Ä–∑–∏–Ω–∞" }, { text: "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã" }],
      [{ text: "‚ÑπÔ∏è –û –Ω–∞—Å" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  };

  bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard,
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–®–∞—É—Ä–º–∞"
export function handleShawarmaMenu(bot: BotInstance, msg: BotMessage): void {
  const chatId = msg.chat.id;
  const items = getMenuByCategory("shawarma");

  let message = "üåØ –ù–∞—à–∞ —à–∞—É—Ä–º–∞:\n\n";

  const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

  items.forEach((item, index) => {
    message += `${index + 1}. ${item.name}\n`;
    message += `   üí∞ ${item.price} —Ä—É–±.\n`;
    message += `   üìù ${item.description}\n\n`;

    keyboard.push([
      {
        text: `${item.name} - ${item.price}‚ÇΩ`,
        callback_data: `item_${item.id}`,
      },
    ]);
  });

  keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_menu" }]);

  bot.sendMessage(chatId, message, {
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–∞–ø–∏—Ç–∫–∏"
export function handleDrinksMenu(bot: BotInstance, msg: BotMessage): void {
  const chatId = msg.chat.id;
  const items = getMenuByCategory("drinks");

  let message = "ü•§ –ù–∞—à–∏ –Ω–∞–ø–∏—Ç–∫–∏:\n\n";

  const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

  items.forEach((item, index) => {
    message += `${index + 1}. ${item.name}\n`;
    message += `   üí∞ ${item.price} —Ä—É–±.\n`;
    message += `   üìù ${item.description}\n\n`;

    keyboard.push([
      {
        text: `${item.name} - ${item.price}‚ÇΩ`,
        callback_data: `item_${item.id}`,
      },
    ]);
  });

  keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_menu" }]);

  bot.sendMessage(chatId, message, {
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
export function handleAbout(bot: BotInstance, msg: BotMessage): void {
  const chatId = msg.chat.id;

  const aboutMessage = `
‚ÑπÔ∏è –û –Ω–∞—Å:

üè™ –õ—É—á—à–∞—è —à–∞—É—Ä–º–∞ –≤ –≥–æ—Ä–æ–¥–µ!
üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00 - 23:00
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1

–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!
  `;

  bot.sendMessage(chatId, aboutMessage);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
export function handleItemSelection(bot: BotInstance, query: BotCallbackQuery): void {
  const chatId = query.message?.chat.id;
  const itemId = query.data?.replace("item_", "");

  if (!chatId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);

  if (!item) {
    bot.answerCallbackQuery(query.id, { text: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }).catch(() => {});
    return;
  }

  const message = `
‚úÖ ${item.name}

üí∞ –¶–µ–Ω–∞: ${item.price} —Ä—É–±.
üìù ${item.description}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
  `;

  const keyboard = {
    inline_keyboard: [
      [{ text: "üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data: `add_to_cart_${item.id}` }],
      [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }],
    ],
  };

  if (query.message?.message_id) {
    bot
      .editMessageText(message, {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard,
      })
      .catch(() => {});
  }

  bot.answerCallbackQuery(query.id, { text: `–í—ã–±—Ä–∞–Ω–æ: ${item.name}` }).catch(() => {});
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
export function handleBackToMenu(bot: BotInstance, query: BotCallbackQuery): void {
  const chatId = query.message?.chat.id;
  const userName = query.from?.first_name || "–î—Ä—É–≥";

  if (!chatId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  const welcomeMessage = `
ü•ô –ü—Ä–∏–≤–µ—Ç, ${userName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∞—É—Ä–º–∞ –ë–æ—Ç!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é –∏ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
  `;

  if (query.message?.message_id) {
    bot
      .editMessageText(welcomeMessage, {
        chat_id: chatId,
        message_id: query.message.message_id,
      })
      .catch(() => {});
  }

  bot.answerCallbackQuery(query.id).catch(() => {});
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
export async function handleAddToCart(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const itemId = query.data?.replace("add_to_cart_", "");

  if (!chatId || !userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);

  if (!item) {
    bot.answerCallbackQuery(query.id, { text: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }).catch(() => {});
    return;
  }

  try {
    await cartService.addToCart(userId, item, 1);
    const cartCount = await cartService.getCartItemsCount(userId);

    bot
      .answerCallbackQuery(query.id, {
        text: `‚úÖ ${item.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! (${cartCount} —Ç–æ–≤–∞—Ä–æ–≤)`,
      })
      .catch(() => {});

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"
    const message = `
‚úÖ ${item.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!

üí∞ –¶–µ–Ω–∞: ${item.price} —Ä—É–±.
üìù ${item.description}

üõí –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartCount} —Ç–æ–≤–∞—Ä–æ–≤
    `;

    const keyboard = {
      inline_keyboard: [
        [{ text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data: "view_cart" }],
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data: `add_to_cart_${item.id}` }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }],
      ],
    };

    if (query.message?.message_id) {
      bot
        .editMessageText(message, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard,
        })
        .catch(() => {});
    }
  } catch (error) {
    console.error("Error adding to cart:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É" }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
export async function handleViewCart(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = "chat" in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;

  if (!chatId || !userId) {
    return;
  }

  try {
    const cart = await cartService.getCart(userId);
    const total = await cartService.getCartTotal(userId);

    if (cart.length === 0) {
      const message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é!";

      if ("data" in msg) {
        // –≠—Ç–æ callback query
        if (msg.message?.message_id) {
          bot
            .editMessageText(message, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              reply_markup: {
                inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }]],
              },
            })
            .catch(() => {});
        }
        bot.answerCallbackQuery(msg.id, { text: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" }).catch(() => {});
      } else {
        // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, message);
      }
      return;
    }

    let message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n";
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

    cart.forEach((cartItem, index) => {
      const item = cartItem.menuItem;
      const subtotal = item.price * cartItem.quantity;

      message += `${index + 1}. ${item.name}\n`;
      message += `   üí∞ ${item.price}‚ÇΩ √ó ${cartItem.quantity} = ${subtotal}‚ÇΩ\n\n`;

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      keyboard.push([
        { text: "‚ûñ", callback_data: `decrease_${item.id}` },
        { text: `${cartItem.quantity} —à—Ç.`, callback_data: `quantity_${item.id}` },
        { text: "‚ûï", callback_data: `increase_${item.id}` },
        { text: "üóë", callback_data: `remove_${item.id}` },
      ]);
    });

    message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${total}‚ÇΩ`;

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    keyboard.push([
      { text: "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "clear_cart" },
      { text: "üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "checkout" },
    ]);
    keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }]);

    if ("data" in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error("Error viewing cart:", error);
    const errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã";

    if ("data" in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleIncreaseQuantity(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace("increase_", "");

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  try {
    const cart = await cartService.getCart(userId);
    const cartItem = cart.find((item) => item.menuItem.id === itemId);

    if (cartItem) {
      await cartService.updateQuantity(userId, itemId, cartItem.quantity + 1);
      await handleViewCart(bot, query);
    }
  } catch (error) {
    console.error("Error increasing quantity:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleDecreaseQuantity(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace("decrease_", "");

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  try {
    const cart = await cartService.getCart(userId);
    const cartItem = cart.find((item) => item.menuItem.id === itemId);

    if (cartItem) {
      const newQuantity = cartItem.quantity - 1;
      if (newQuantity <= 0) {
        await cartService.removeFromCart(userId, itemId);
      } else {
        await cartService.updateQuantity(userId, itemId, newQuantity);
      }
      await handleViewCart(bot, query);
    }
  } catch (error) {
    console.error("Error decreasing quantity:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
export async function handleRemoveFromCart(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace("remove_", "");

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  try {
    await cartService.removeFromCart(userId, itemId);
    bot.answerCallbackQuery(query.id, { text: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" }).catch(() => {});
    await handleViewCart(bot, query);
  } catch (error) {
    console.error("Error removing from cart:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞" }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
export async function handleClearCart(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const userId = query.from?.id;

  if (!userId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  try {
    await cartService.clearCart(userId);
    bot.answerCallbackQuery(query.id, { text: "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞" }).catch(() => {});
    await handleViewCart(bot, query);
  } catch (error) {
    console.error("Error clearing cart:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã" }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
export async function handleCheckout(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const userName = query.from?.first_name;

  if (!chatId || !userId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  try {
    const cart = await cartService.getCart(userId);
    const total = await cartService.getCartTotal(userId);

    if (cart.length === 0) {
      bot.answerCallbackQuery(query.id, { text: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" }).catch(() => {});
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await databaseService.upsertUser(userId, query.from?.username, userName);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    const orderId = await databaseService.createOrder(userId, cart, total);

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await cartService.clearCart(userId);

    const message = `
‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderId}
üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${total}‚ÇΩ

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.
–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –æ–∂–∏–¥–∞–Ω–∏–∏

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ü•ô
    `;

    const keyboard = {
      inline_keyboard: [
        [{ text: "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data: "my_orders" }],
        [{ text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
      ],
    };

    if (query.message?.message_id) {
      bot
        .editMessageText(message, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard,
        })
        .catch(() => {});
    }

    bot.answerCallbackQuery(query.id, { text: `–ó–∞–∫–∞–∑ #${orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω!` }).catch(() => {});
  } catch (error) {
    console.error("Error during checkout:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function handleMyOrders(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = "chat" in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;

  if (!chatId || !userId) {
    return;
  }

  try {
    const orders = await databaseService.getUserOrders(userId, 5);

    if (orders.length === 0) {
      const message =
        "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!";

      if ("data" in msg) {
        // –≠—Ç–æ callback query
        if (msg.message?.message_id) {
          bot
            .editMessageText(message, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              reply_markup: {
                inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }]],
              },
            })
            .catch(() => {});
        }
        bot.answerCallbackQuery(msg.id, { text: "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç" }).catch(() => {});
      } else {
        // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, message);
      }
      return;
    }

    let message = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n";
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

    orders.forEach((order, index) => {
      const statusEmoji =
        {
          pending: "‚è≥",
          confirmed: "‚úÖ",
          preparing: "üë®‚Äçüç≥",
          ready: "üéâ",
          delivered: "‚úÖ",
        }[order.status] || "‚ùì";

      message += `${index + 1}. –ó–∞–∫–∞–∑ #${order.id}\n`;
      message += `   ${statusEmoji} –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n`;
      message += `   üí∞ –°—É–º–º–∞: ${order.totalPrice}‚ÇΩ\n`;
      message += `   üìÖ ${formatDate(order.createdAt)}\n\n`;

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
      keyboard.push([
        { text: `üì¶ –ó–∞–∫–∞–∑ #${order.id}`, callback_data: `order_details_${order.id}` },
      ]);
    });

    keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }]);

    if ("data" in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error("Error viewing orders:", error);
    const errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤";

    if ("data" in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
export async function handleOrderDetails(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const orderId = query.data?.replace("order_details_", "");

  if (!chatId || !userId || !orderId) {
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞" }).catch(() => {});
    return;
  }

  try {
    const order = await databaseService.getOrderById(orderId);

    if (!order || order.userId !== userId) {
      bot.answerCallbackQuery(query.id, { text: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" }).catch(() => {});
      return;
    }

    const statusEmoji =
      {
        pending: "‚è≥",
        confirmed: "‚úÖ",
        preparing: "üë®‚Äçüç≥",
        ready: "üéâ",
        delivered: "‚úÖ",
      }[order.status] || "‚ùì";

    let message = `üì¶ –ó–∞–∫–∞–∑ #${order.id}\n\n`;
    message += `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n`;
    message += `üìÖ –î–∞—Ç–∞: ${formatDate(order.createdAt)}\n\n`;
    message += `üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;

    order.items.forEach((item, index) => {
      const subtotal = item.menuItem.price * item.quantity;
      message += `${index + 1}. ${item.menuItem.name}\n`;
      message += `   üí∞ ${item.menuItem.price}‚ÇΩ √ó ${item.quantity} = ${subtotal}‚ÇΩ\n`;
    });

    message += `\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${order.totalPrice}‚ÇΩ`;

    const keyboard = {
      inline_keyboard: [
        [{ text: "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data: "my_orders" }],
        [{ text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
      ],
    };

    if (query.message?.message_id) {
      bot
        .editMessageText(message, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard,
        })
        .catch(() => {});
    }

    bot.answerCallbackQuery(query.id).catch(() => {});
  } catch (error) {
    console.error("Error viewing order details:", error);
    bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞" }).catch(() => {});
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status: string): string {
  const statusMap: { [key: string]: string } = {
    pending: "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
    confirmed: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
    preparing: "–ì–æ—Ç–æ–≤–∏—Ç—Å—è",
    ready: "–ì–æ—Ç–æ–≤",
    delivered: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
  };
  return statusMap[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
}

function formatDate(date: Date): string {
  return new Date(date).toLocaleString("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}
