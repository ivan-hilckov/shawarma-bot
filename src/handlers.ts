// eslint-disable-next-line import/no-named-as-default
import botApiClient from './api-client';
import config from './config';
// eslint-disable-next-line import/no-named-as-default
import databaseService from './database';
import { getMenuByCategory, getItemById } from './menu';
import { BotInstance, BotMessage, BotCallbackQuery, MenuItem } from './types';

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getItemQuantityInCart(userId: number, itemId: string): Promise<number> {
  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find(item => item.menuItem.id === itemId);
    return cartItem ? cartItem.quantity : 0;
  } catch (error) {
    console.error('Error getting item quantity from cart:', error);
    return 0;
  }
}

// –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
async function createCatalogKeyboard(
  items: MenuItem[]
): Promise<Array<Array<{ text: string; callback_data: string }>>> {
  const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

  items.forEach(item => {
    const photoIcon = item.photo ? 'üì∏ ' : '';
    // –ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π
    keyboard.push([
      { text: `${photoIcon}${item.name} ‚Äî ${item.price}‚ÇΩ`, callback_data: `item_${item.id}` },
    ]);
  });

  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
  keyboard.push([{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

  return keyboard;
}

// ===== –ù–û–í–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–¢–ê–ü–ê 3 =====

// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async function createItemKeyboardWithFavorites(
  itemId: string,
  currentQuantity: number,
  userId: number
): Promise<Array<Array<{ text: string; callback_data: string }>>> {
  const keyboard = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const isInFavorites = await databaseService.isInFavorites(userId, itemId);

  if (currentQuantity === 0) {
    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
    keyboard.push([{ text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${itemId}` }]);
  } else {
    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º +/- –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    keyboard.push([
      { text: '‚àí', callback_data: `decrease_from_item_${itemId}` },
      { text: `${currentQuantity} —à—Ç.`, callback_data: `quantity_${itemId}` },
      { text: '+', callback_data: `increase_from_item_${itemId}` },
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard.push([
      { text: '–£–±—Ä–∞—Ç—å –≤—Å–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', callback_data: `remove_all_from_item_${itemId}` },
    ]);
  }

  // –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const favoriteText = isInFavorites ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
  const favoriteAction = isInFavorites ? `remove_favorite_${itemId}` : `add_favorite_${itemId}`;
  keyboard.push([{ text: favoriteText, callback_data: favoriteAction }]);

  // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  keyboard.push([
    { text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'view_cart' },
    { text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'back_to_menu' },
  ]);

  return keyboard;
}

// –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function createMainKeyboard(userId: number): Promise<any> {
  let cartText = 'üõí –ö–æ—Ä–∑–∏–Ω–∞';

  if (userId) {
    try {
      const cartTotal = await botApiClient.getCartTotal(userId);
      if (cartTotal.itemsCount > 0) {
        cartText = `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${cartTotal.itemsCount})`;
      }
    } catch (error) {
      console.error('Error getting cart total for badge:', error);
    }
  }

  return {
    keyboard: [
      [{ text: 'üåØ –®–∞—É—Ä–º–∞' }, { text: 'ü•§ –ù–∞–ø–∏—Ç–∫–∏' }],
      [{ text: cartText }, { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }],
      [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å' }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  };
}

// –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
async function createRecommendationsMessage(userId: number): Promise<{
  message: string;
  keyboard: Array<Array<{ text: string; callback_data: string }>>;
}> {
  try {
    const recommendations = await databaseService.getUserRecommendations(userId);
    const userStats = await databaseService.getUserStats(userId);

    let message = '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üéØ\n\n';

    if (userStats.totalOrders > 0) {
      message += `–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      message += `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${userStats.totalOrders}\n`;
      message += `‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${userStats.totalSpent.toFixed(0)}‚ÇΩ\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${userStats.avgOrderValue.toFixed(0)}‚ÇΩ\n\n`;
    }

    if (recommendations.length === 0) {
      message +=
        '–ü–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ!';

      return {
        message,
        keyboard: [[{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]],
      };
    }

    message += '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:\n\n';

    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

    recommendations.forEach((rec, index) => {
      const typeEmoji =
        {
          frequent: 'üî•',
          time_based: '‚è∞',
          popular: '‚≠ê',
          new: 'üÜï',
        }[rec.type as 'frequent' | 'time_based' | 'popular' | 'new'] || 'üí°';

      message += `${index + 1}. ${typeEmoji} ${rec.menuItem.name} ‚Äî ${rec.menuItem.price}‚ÇΩ\n`;
      message += `${rec.reason}\n\n`;

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      keyboard.push([
        { text: rec.menuItem.name, callback_data: `item_${rec.menuItem.id}` },
        { text: '–î–æ–±–∞–≤–∏—Ç—å', callback_data: `quick_add_${rec.menuItem.id}` },
      ]);
    });

    keyboard.push([{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    return { message, keyboard };
  } catch (error) {
    console.error('Error creating recommendations message:', error);
    return {
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      keyboard: [[{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]],
    };
  }
}

// –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
async function createFavoritesMessage(userId: number): Promise<{
  message: string;
  keyboard: Array<Array<{ text: string; callback_data: string }>>;
}> {
  try {
    const favorites = await databaseService.getUserFavorites(userId);

    if (favorites.length === 0) {
      return {
        message:
          '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ ‚≠ê\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ç–æ–≤–∞—Ä–∞!',
        keyboard: [[{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]],
      };
    }

    let message = '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚≠ê\n\n';

    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

    favorites.forEach((favorite, index) => {
      const photoIcon = favorite.menuItem.photo ? 'üì∏ ' : '';
      message += `${index + 1}. ${photoIcon}${favorite.menuItem.name} ‚Äî ${favorite.menuItem.price}‚ÇΩ\n`;
      message += `${favorite.menuItem.description}\n\n`;

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      keyboard.push([
        { text: favorite.menuItem.name, callback_data: `item_${favorite.menuItem.id}` },
        { text: '–î–æ–±–∞–≤–∏—Ç—å', callback_data: `quick_add_${favorite.menuItem.id}` },
      ]);
    });

    keyboard.push([{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    return { message, keyboard };
  } catch (error) {
    console.error('Error creating favorites message:', error);
    return {
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      keyboard: [[{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]],
    };
  }
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
export async function handleStart(bot: BotInstance, msg: BotMessage): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const userName = msg.from?.first_name || '–î—Ä—É–≥';

  const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–∫—É—Å–Ω–æ–π —à–∞—É—Ä–º—ã!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
‚Ä¢ –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.
  `;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∫–æ—Ä–∑–∏–Ω—ã
  const keyboard = await createMainKeyboard(userId || 0);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard,
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–®–∞—É—Ä–º–∞"
export async function handleShawarmaMenu(bot: BotInstance, msg: BotMessage): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const items = getMenuByCategory('shawarma');

  if (!userId) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  let message = '–ù–∞—à–∞ —à–∞—É—Ä–º–∞ üåØ\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç
  items.forEach((item, index) => {
    const photoIcon = item.photo ? 'üì∏ ' : '';
    message += `${index + 1}. ${photoIcon}${item.name} ‚Äî ${item.price}‚ÇΩ\n`;
    message += `${item.description}\n\n`;
  });

  message += `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞
  const keyboard = await createCatalogKeyboard(items);

  bot.sendMessage(chatId, message, {
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–∞–ø–∏—Ç–∫–∏"
export async function handleDrinksMenu(bot: BotInstance, msg: BotMessage): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const items = getMenuByCategory('drinks');

  if (!userId) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  let message = '–ù–∞—à–∏ –Ω–∞–ø–∏—Ç–∫–∏ ü•§\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç
  items.forEach((item, index) => {
    message += `${index + 1}. ${item.name} ‚Äî ${item.price}‚ÇΩ\n`;
    message += `${item.description}\n\n`;
  });

  message += `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞
  const keyboard = await createCatalogKeyboard(items);

  bot.sendMessage(chatId, message, {
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
export function handleAbout(bot: BotInstance, msg: BotMessage): void {
  const chatId = msg.chat.id;

  const aboutMessage = `
–û –Ω–∞—Å ‚ÑπÔ∏è

–ú—ã –≥–æ—Ç–æ–≤–∏–º —Å–∞–º—É—é –≤–∫—É—Å–Ω—É—é —à–∞—É—Ä–º—É –≤ –≥–æ—Ä–æ–¥–µ!

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00 ‚Äî 23:00
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1

–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!

üì± –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!
  `;

  const miniAppKeyboard = {
    inline_keyboard: [
      [
        {
          text: 'üåØ –û—Ç–∫—Ä—ã—Ç—å –®–∞—É—Ä–º–∞ App',
          web_app: { url: 'https://botgarden.store/' },
        },
      ],
      [
        {
          text: 'üì± –ß—Ç–æ —Ç–∞–∫–æ–µ Mini App?',
          callback_data: 'about_miniapp',
        },
      ],
    ],
  };

  bot.sendMessage(chatId, aboutMessage, {
    reply_markup: miniAppKeyboard,
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function handleProfile(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = 'chat' in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;
  const userName = msg.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  if (!chatId || !userId) {
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStats = await databaseService.getUserStats(userId);

    let message = `–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§\n\n`;
    message += `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n\n`;

    if (userStats.totalOrders > 0) {
      message += `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      message += `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${userStats.totalOrders}\n`;
      message += `‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${userStats.totalSpent.toFixed(0)}‚ÇΩ\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${userStats.avgOrderValue.toFixed(0)}‚ÇΩ\n`;
      message += `‚Ä¢ –õ—é–±–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${userStats.favoriteCategory === 'shawarma' ? '–®–∞—É—Ä–º–∞ üåØ' : '–ù–∞–ø–∏—Ç–∫–∏ ü•§'}\n\n`;
    } else {
      message += `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤.\n\n`;
    }

    message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
          { text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'favorites' },
        ],
        [{ text: 'üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data: 'recommendations' }],
        [{ text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
      ],
    };

    if ('data' in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: keyboard,
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id, { text: '–ü—Ä–æ—Ñ–∏–ª—å' }).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: keyboard,
      });
    }
  } catch (error) {
    console.error('Error viewing profile:', error);
    const errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è';

    if ('data' in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleItemSelection(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const itemId = query.data?.replace('item_', '');

  if (!chatId || !itemId || !userId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);

  if (!item) {
    bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }).catch(() => {});
    return;
  }

  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å loading
  const notificationText = `–ó–∞–≥—Ä—É–∂–∞–µ–º ${item.name}...`;
  bot.answerCallbackQuery(query.id, { text: notificationText }).catch(() => {});

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const currentQuantity = await getItemQuantityInCart(userId, itemId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    let message = `
${item.name}

–¶–µ–Ω–∞: ${item.price} —Ä—É–±.
${item.description}
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
    if (currentQuantity > 0) {
      const subtotal = item.price * currentQuantity;
      message += `\n–í –∫–æ—Ä–∑–∏–Ω–µ: ${currentQuantity} —à—Ç. (${subtotal}‚ÇΩ)`;
    }

    message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å +/- –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    const keyboard = {
      inline_keyboard: await createItemKeyboardWithFavorites(itemId, currentQuantity, userId),
    };

    // –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë
    if (item.photo) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
      const photoUrl = `${config.ASSETS_BASE_URL}/${item.photo.replace('assets/', '')}`;

      console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ URL: ${photoUrl}`);

      try {
        await bot.sendPhoto(chatId, photoUrl, {
          caption: message,
          reply_markup: keyboard,
        });
        console.log(`‚úÖ –§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      } catch (photoError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', photoError);
        // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.sendMessage(chatId, `üì∏ ${message}`, { reply_markup: keyboard });
        console.log(`üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.name}`);
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, message, { reply_markup: keyboard });
      console.log(`üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.name} (–±–µ–∑ —Ñ–æ—Ç–æ)`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleItemSelection:', error);
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ "${item.name}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`, {
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'back_to_menu' }]],
      },
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
export async function handleBackToMenu(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const userName = query.from?.first_name || '–î—Ä—É–≥';

  if (!chatId || !userId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–∫—É—Å–Ω–æ–π —à–∞—É—Ä–º—ã!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.
  `;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã
  const keyboard = await createMainKeyboard(userId || 0);

  if (query.message?.message_id) {
    bot
      .editMessageText(welcomeMessage, {
        chat_id: chatId,
        message_id: query.message.message_id,
      })
      .catch(() => {});
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
  bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ üè†', {
    reply_markup: keyboard,
  });

  bot.answerCallbackQuery(query.id, { text: '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }).catch(() => {});
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
export async function handleAddToCart(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const itemId = query.data?.replace('add_to_cart_', '');

  if (!chatId || !userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);

  if (!item) {
    bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }).catch(() => {});
    return;
  }

  try {
    await botApiClient.addToCart(userId, item.id, 1);
    const cartTotal = await botApiClient.getCartTotal(userId);
    const cartCount = cartTotal.itemsCount;
    const cartTotalPrice = cartTotal.total;

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    bot
      .answerCallbackQuery(query.id, {
        text: `${item.name} –¥–æ–±–∞–≤–ª–µ–Ω! –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${cartTotalPrice}‚ÇΩ`,
      })
      .catch(() => {});

    // –í–º–µ—Å—Ç–æ —Å–º–µ–Ω—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–∞
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π query –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ handleItemSelection
    const updatedQuery = {
      ...query,
      data: `item_${itemId}`,
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await handleItemSelection(bot, updatedQuery);
  } catch (error) {
    console.error('Error adding to cart:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
export async function handleViewCart(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = 'chat' in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;

  if (!chatId || !userId) {
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartTotal = await botApiClient.getCartTotal(userId);
    const total = cartTotal.total;

    if (cart.length === 0) {
      const message = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑–∞.';

      if ('data' in msg) {
        // –≠—Ç–æ callback query
        if (msg.message?.message_id) {
          bot
            .editMessageText(message, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              reply_markup: {
                inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data: 'back_to_menu' }]],
              },
            })
            .catch(() => {});
        }
        bot.answerCallbackQuery(msg.id, { text: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' }).catch(() => {});
      } else {
        // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, message);
      }
      return;
    }

    let message = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ üõí\n\n';
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

    cart.forEach((cartItem, index) => {
      const item = cartItem.menuItem;
      const subtotal = item.price * cartItem.quantity;

      message += `${index + 1}. ${item.name}\n`;
      message += `${item.price}‚ÇΩ √ó ${cartItem.quantity} = ${subtotal}‚ÇΩ\n\n`;

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      keyboard.push([
        { text: '‚àí', callback_data: `decrease_${item.id}` },
        { text: `${cartItem.quantity} —à—Ç.`, callback_data: `quantity_${item.id}` },
        { text: '+', callback_data: `increase_${item.id}` },
        { text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `remove_${item.id}` },
      ]);
    });

    message += `–û–±—â–∞—è —Å—É–º–º–∞: ${total}‚ÇΩ`;

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    keyboard.push([
      { text: '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' },
      { text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' },
    ]);
    keyboard.push([{ text: '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    if ('data' in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error('Error viewing cart:', error);
    const errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã';

    if ('data' in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
export async function handleCheckout(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const userName = query.from?.first_name;

  if (!chatId || !userId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartTotal = await botApiClient.getCartTotal(userId);
    const total = cartTotal.total;

    if (cart.length === 0) {
      bot.answerCallbackQuery(query.id, { text: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' }).catch(() => {});
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await databaseService.upsertUser(userId, query.from?.username, userName);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    const orderId = await databaseService.createOrder(userId, cart, total);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const order = await databaseService.getOrderById(orderId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—É (–±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ bot.ts)
    if (order && (global as any).notificationService) {
      try {
        await (global as any).notificationService.notifyNewOrder(order);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    }

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await botApiClient.clearCart(userId);

    const message = `
–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! ‚úÖ

–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderId}
–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${total}‚ÇΩ

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.
–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í –æ–∂–∏–¥–∞–Ω–∏–∏

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!
    `;

    const keyboard = {
      inline_keyboard: [
        [{ text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
        [{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
      ],
    };

    if (query.message?.message_id) {
      bot
        .editMessageText(message, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard,
        })
        .catch(() => {});
    }

    bot.answerCallbackQuery(query.id, { text: `–ó–∞–∫–∞–∑ #${orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω!` }).catch(() => {});
  } catch (error) {
    console.error('Error during checkout:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function handleMyOrders(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = 'chat' in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;

  if (!chatId || !userId) {
    return;
  }

  try {
    const orders = await databaseService.getUserOrders(userId, 5);

    if (orders.length === 0) {
      const message =
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ üìã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!';

      if ('data' in msg) {
        // –≠—Ç–æ callback query
        if (msg.message?.message_id) {
          bot
            .editMessageText(message, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              reply_markup: {
                inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data: 'back_to_menu' }]],
              },
            })
            .catch(() => {});
        }
        bot.answerCallbackQuery(msg.id, { text: '–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç' }).catch(() => {});
      } else {
        // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, message);
      }
      return;
    }

    let message = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã üìã\n\n';
    const keyboard: Array<Array<{ text: string; callback_data: string }>> = [];

    orders.forEach((order, index) => {
      const statusEmoji =
        {
          pending: '‚è≥',
          confirmed: '‚úÖ',
          preparing: 'üë®‚Äçüç≥',
          ready: 'üéâ',
          delivered: '‚úÖ',
        }[order.status] || '‚ùì';

      message += `${index + 1}. –ó–∞–∫–∞–∑ #${order.id}\n`;
      message += `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n`;
      message += `–°—É–º–º–∞: ${order.totalPrice}‚ÇΩ\n`;
      message += `–î–∞—Ç–∞: ${formatDate(order.createdAt)}\n\n`;

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
      keyboard.push([{ text: `–ó–∞–∫–∞–∑ #${order.id}`, callback_data: `order_details_${order.id}` }]);
    });

    keyboard.push([{ text: '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    if ('data' in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error('Error viewing orders:', error);
    const errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤';

    if ('data' in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
export async function handleOrderDetails(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const chatId = query.message?.chat.id;
  const userId = query.from?.id;
  const orderId = query.data?.replace('order_details_', '');

  if (!chatId || !userId || !orderId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const order = await databaseService.getOrderById(orderId);

    if (!order || order.userId !== userId) {
      bot.answerCallbackQuery(query.id, { text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }).catch(() => {});
      return;
    }

    const statusEmoji =
      {
        pending: '‚è≥',
        confirmed: '‚úÖ',
        preparing: 'üë®‚Äçüç≥',
        ready: 'üéâ',
        delivered: '‚úÖ',
      }[order.status] || '‚ùì';

    let message = `–ó–∞–∫–∞–∑ #${order.id} üì¶\n\n`;
    message += `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n`;
    message += `–î–∞—Ç–∞: ${formatDate(order.createdAt)}\n\n`;
    message += `–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;

    order.items.forEach((item, index) => {
      const subtotal = item.menuItem.price * item.quantity;
      message += `${index + 1}. ${item.menuItem.name}\n`;
      message += `${item.menuItem.price}‚ÇΩ √ó ${item.quantity} = ${subtotal}‚ÇΩ\n`;
    });

    message += `\n–û–±—â–∞—è —Å—É–º–º–∞: ${order.totalPrice}‚ÇΩ`;

    const keyboard = {
      inline_keyboard: [
        [{ text: '–í—Å–µ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
        [{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
      ],
    };

    if (query.message?.message_id) {
      bot
        .editMessageText(message, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard,
        })
        .catch(() => {});
    }

    bot.answerCallbackQuery(query.id).catch(() => {});
  } catch (error) {
    console.error('Error viewing order details:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞' }).catch(() => {});
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status: string): string {
  const statusMap: { [key: string]: string } = {
    pending: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
    confirmed: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    preparing: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
    ready: '–ì–æ—Ç–æ–≤',
    delivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
  };
  return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDate(date: Date): string {
  return new Date(date).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
export async function handleAdminOrderAction(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const data = query.data;

  if (!userId || !data) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
  const notificationService = (global as any).notificationService;
  if (!notificationService || !notificationService.isAdmin(userId)) {
    bot.answerCallbackQuery(query.id, { text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }).catch(() => {});
    return;
  }

  try {
    if (data.startsWith('admin_confirm_')) {
      const orderId = data.replace('admin_confirm_', '');
      const oldOrder = await databaseService.getOrderById(orderId);
      await databaseService.updateOrderStatus(orderId, 'confirmed');

      const order = await databaseService.getOrderById(orderId);
      if (order && oldOrder) {
        await notificationService.notifyStatusChange(order, oldOrder.status);
      }

      bot
        .answerCallbackQuery(query.id, { text: `‚úÖ –ó–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω` })
        .catch(() => {});
    } else if (data.startsWith('admin_reject_')) {
      const orderId = data.replace('admin_reject_', '');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "rejected" –≤ —Ç–∏–ø—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–∏—Ç—å

      bot.answerCallbackQuery(query.id, { text: `‚ùå –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–∫–ª–æ–Ω–µ–Ω` }).catch(() => {});
    } else if (data.startsWith('admin_preparing_')) {
      const orderId = data.replace('admin_preparing_', '');
      const oldOrder = await databaseService.getOrderById(orderId);
      await databaseService.updateOrderStatus(orderId, 'preparing');

      const order = await databaseService.getOrderById(orderId);
      if (order && oldOrder) {
        await notificationService.notifyStatusChange(order, oldOrder.status);
      }

      bot.answerCallbackQuery(query.id, { text: `üë®‚Äçüç≥ –ó–∞–∫–∞–∑ #${orderId} –≥–æ—Ç–æ–≤–∏—Ç—Å—è` }).catch(() => {});
    } else if (data.startsWith('admin_ready_')) {
      const orderId = data.replace('admin_ready_', '');
      const oldOrder = await databaseService.getOrderById(orderId);
      await databaseService.updateOrderStatus(orderId, 'ready');

      const order = await databaseService.getOrderById(orderId);
      if (order && oldOrder) {
        await notificationService.notifyStatusChange(order, oldOrder.status);
      }

      bot.answerCallbackQuery(query.id, { text: `üéâ –ó–∞–∫–∞–∑ #${orderId} –≥–æ—Ç–æ–≤!` }).catch(() => {});
    } else if (data.startsWith('admin_details_')) {
      const orderId = data.replace('admin_details_', '');
      const order = await databaseService.getOrderById(orderId);

      if (order) {
        let message = `üì¶ <b>–ó–∞–∫–∞–∑ #${order.id}</b>\n\n`;
        message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.userName}\n`;
        message += `üìÖ –í—Ä–µ–º—è: ${formatDate(order.createdAt)}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n\n`;
        message += `üõí <b>–°–æ—Å—Ç–∞–≤:</b>\n`;

        order.items.forEach((item, index) => {
          const subtotal = item.menuItem.price * item.quantity;
          message += `${index + 1}. ${item.menuItem.name}\n`;
          message += `   üí∞ ${item.menuItem.price}‚ÇΩ √ó ${item.quantity} = ${subtotal}‚ÇΩ\n`;
        });

        message += `\nüí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞: ${order.totalPrice}‚ÇΩ</b>`;

        await bot.sendMessage(query.from.id, message, { parse_mode: 'HTML' });
      }

      bot.answerCallbackQuery(query.id, { text: 'üìã –î–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' }).catch(() => {});
    }
  } catch (error) {
    console.error('Error handling admin action:', error);
    bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ' }).catch(() => {});
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è emoji —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status: string): string {
  const statusMap: { [key: string]: string } = {
    pending: '‚è≥',
    confirmed: '‚úÖ',
    preparing: 'üë®‚Äçüç≥',
    ready: 'üéâ',
    delivered: '‚úÖ',
  };
  return statusMap[status] || '‚ùì';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Mini App
export async function handleAboutMiniApp(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const message = `
–ß—Ç–æ —Ç–∞–∫–æ–µ Telegram Mini App? üì±

Mini App ‚Äî —ç—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä—è–º–æ –≤ Telegram.

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø—Ä—è–º–æ –∏–∑ —á–∞—Ç–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ç–µ–º—É Telegram
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö

–í –Ω–∞—à–µ–º Mini App –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –æ–Ω–ª–∞–π–Ω
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
  `;

  try {
    await bot.answerCallbackQuery(query.id, { text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Mini App' });

    if (query.message?.message_id) {
      await bot.editMessageText(message, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üåØ –û—Ç–∫—Ä—ã—Ç—å –®–∞—É—Ä–º–∞ App',
                web_app: { url: 'https://botgarden.store/' },
              },
            ],
            [
              {
                text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É',
                callback_data: 'back_to_start',
              },
            ],
          ],
        },
      });
    }
  } catch (error) {
    console.error('Error handling about mini app:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É
export async function handleBackToStart(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const miniAppMessage = `
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ

–í –Ω—ë–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
  `;

  const miniAppKeyboard = {
    inline_keyboard: [
      [
        {
          text: 'üåØ –û—Ç–∫—Ä—ã—Ç—å –®–∞—É—Ä–º–∞ App',
          web_app: { url: 'https://botgarden.store/' },
        },
      ],
      [
        {
          text: 'üì± –ß—Ç–æ —Ç–∞–∫–æ–µ Mini App?',
          callback_data: 'about_miniapp',
        },
      ],
    ],
  };

  try {
    await bot.answerCallbackQuery(query.id, { text: '–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É' });

    if (query.message?.message_id) {
      await bot.editMessageText(miniAppMessage, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        reply_markup: miniAppKeyboard,
      });
    }
  } catch (error) {
    console.error('Error handling back to start:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Mini App –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
export function handleMiniApp(bot: BotInstance, msg: BotMessage): void {
  const chatId = msg.chat.id;
  const userName = msg.from?.first_name || '–î—Ä—É–≥';

  const miniAppMessage = `
–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

–í –Ω—ë–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –æ–Ω–ª–∞–π–Ω
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –≤–∞—à—É —Ç–µ–º—É Telegram

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
  `;

  const miniAppKeyboard = {
    inline_keyboard: [
      [
        {
          text: 'üåØ –û—Ç–∫—Ä—ã—Ç—å –®–∞—É—Ä–º–∞ App',
          web_app: { url: 'https://botgarden.store/' },
        },
      ],
      [
        {
          text: 'üì± –ß—Ç–æ —Ç–∞–∫–æ–µ Mini App?',
          callback_data: 'about_miniapp',
        },
      ],
      [
        {
          text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
          callback_data: 'back_to_menu',
        },
      ],
    ],
  };

  bot.sendMessage(chatId, miniAppMessage, {
    reply_markup: miniAppKeyboard,
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleIncreaseQuantity(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('increase_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find((item: any) => item.menuItem.id === itemId);

    if (cartItem) {
      await botApiClient.updateCartQuantity(userId, itemId, cartItem.quantity + 1);
      await handleViewCart(bot, query);
    }
  } catch (error) {
    console.error('Error increasing quantity:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleDecreaseQuantity(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('decrease_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find((item: any) => item.menuItem.id === itemId);

    if (cartItem) {
      const newQuantity = cartItem.quantity - 1;
      if (newQuantity <= 0) {
        await botApiClient.removeFromCart(userId, itemId);
      } else {
        await botApiClient.updateCartQuantity(userId, itemId, newQuantity);
      }
      await handleViewCart(bot, query);
    }
  } catch (error) {
    console.error('Error decreasing quantity:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
export async function handleRemoveFromCart(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('remove_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    await botApiClient.removeFromCart(userId, itemId);
    bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' }).catch(() => {});
    await handleViewCart(bot, query);
  } catch (error) {
    console.error('Error removing from cart:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
export async function handleClearCart(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const userId = query.from?.id;

  if (!userId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    await botApiClient.clearCart(userId);
    bot.answerCallbackQuery(query.id, { text: '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞' }).catch(() => {});
    await handleViewCart(bot, query);
  } catch (error) {
    console.error('Error clearing cart:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleIncreaseFromItem(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('increase_from_item_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find((item: any) => item.menuItem.id === itemId);

    if (cartItem) {
      await botApiClient.updateCartQuantity(userId, itemId, cartItem.quantity + 1);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const cartTotal = await botApiClient.getCartTotal(userId);
      const item = getItemById(itemId);

      bot
        .answerCallbackQuery(query.id, {
          text: `${item?.name} –¥–æ–±–∞–≤–ª–µ–Ω! –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartTotal.itemsCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${cartTotal.total}‚ÇΩ`,
        })
        .catch(() => {});

      // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–∞
      const updatedQuery = { ...query, data: `item_${itemId}` };
      await handleItemSelection(bot, updatedQuery);
    }
  } catch (error) {
    console.error('Error increasing quantity from item:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleDecreaseFromItem(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('decrease_from_item_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find((item: any) => item.menuItem.id === itemId);

    if (cartItem) {
      const newQuantity = cartItem.quantity - 1;
      if (newQuantity <= 0) {
        await botApiClient.removeFromCart(userId, itemId);
        bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' }).catch(() => {});
      } else {
        await botApiClient.updateCartQuantity(userId, itemId, newQuantity);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const cartTotal = await botApiClient.getCartTotal(userId);
        const item = getItemById(itemId);

        bot
          .answerCallbackQuery(query.id, {
            text: `${item?.name} —É–±—Ä–∞–Ω! –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartTotal.itemsCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${cartTotal.total}‚ÇΩ`,
          })
          .catch(() => {});
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–∞
      const updatedQuery = { ...query, data: `item_${itemId}` };
      await handleItemSelection(bot, updatedQuery);
    }
  } catch (error) {
    console.error('Error decreasing quantity from item:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–æ–≤–∞—Ä–∞
export async function handleRemoveAllFromItem(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('remove_all_from_item_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    await botApiClient.removeFromCart(userId, itemId);
    const item = getItemById(itemId);

    bot
      .answerCallbackQuery(query.id, { text: `${item?.name} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã` })
      .catch(() => {});

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–∞
    const updatedQuery = { ...query, data: `item_${itemId}` };
    await handleItemSelection(bot, updatedQuery);
  } catch (error) {
    console.error('Error removing all from item:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
export async function handleQuickAdd(bot: BotInstance, query: BotCallbackQuery): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('quick_add_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);
  if (!item) {
    bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }).catch(() => {});
    return;
  }

  try {
    await botApiClient.addToCart(userId, itemId, 1);
    const cartTotal = await botApiClient.getCartTotal(userId);

    bot
      .answerCallbackQuery(query.id, {
        text: `${item.name} –¥–æ–±–∞–≤–ª–µ–Ω! –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartTotal.itemsCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${cartTotal.total}‚ÇΩ`,
      })
      .catch(() => {});

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    const chatId = query.message?.chat?.id;
    if (chatId) {
      const category = item.category;
      if (category === 'shawarma') {
        await handleShawarmaMenu(bot, {
          chat: { id: chatId },
          from: query.from,
        } as BotMessage);
      } else if (category === 'drinks') {
        await handleDrinksMenu(bot, {
          chat: { id: chatId },
          from: query.from,
        } as BotMessage);
      }
    }
  } catch (error) {
    console.error('Error quick adding item:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
export async function handleQuickIncrease(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('quick_increase_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find((item: any) => item.menuItem.id === itemId);

    if (cartItem) {
      await botApiClient.updateCartQuantity(userId, itemId, cartItem.quantity + 1);

      const cartTotal = await botApiClient.getCartTotal(userId);
      const item = getItemById(itemId);

      bot
        .answerCallbackQuery(query.id, {
          text: `${item?.name} –¥–æ–±–∞–≤–ª–µ–Ω! –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartTotal.itemsCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${cartTotal.total}‚ÇΩ`,
        })
        .catch(() => {});

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
      const chatId = query.message?.chat?.id;
      if (chatId) {
        const category = item?.category;
        if (category === 'shawarma') {
          await handleShawarmaMenu(bot, {
            chat: { id: chatId },
            from: query.from,
          } as BotMessage);
        } else if (category === 'drinks') {
          await handleDrinksMenu(bot, {
            chat: { id: chatId },
            from: query.from,
          } as BotMessage);
        }
      }
    }
  } catch (error) {
    console.error('Error quick increasing quantity:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
export async function handleQuickDecrease(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('quick_decrease_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  try {
    const cart = await botApiClient.getCart(userId);
    const cartItem = cart.find((item: any) => item.menuItem.id === itemId);

    if (cartItem) {
      const newQuantity = cartItem.quantity - 1;
      if (newQuantity <= 0) {
        await botApiClient.removeFromCart(userId, itemId);

        const item = getItemById(itemId);
        bot
          .answerCallbackQuery(query.id, { text: `${item?.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã` })
          .catch(() => {});
      } else {
        await botApiClient.updateCartQuantity(userId, itemId, newQuantity);

        const cartTotal = await botApiClient.getCartTotal(userId);
        const item = getItemById(itemId);

        bot
          .answerCallbackQuery(query.id, {
            text: `${item?.name} —É–±—Ä–∞–Ω! –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartTotal.itemsCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${cartTotal.total}‚ÇΩ`,
          })
          .catch(() => {});
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
      const chatId = query.message?.chat?.id;
      if (chatId) {
        const item = getItemById(itemId);
        const category = item?.category;
        if (category === 'shawarma') {
          await handleShawarmaMenu(bot, {
            chat: { id: chatId },
            from: query.from,
          } as BotMessage);
        } else if (category === 'drinks') {
          await handleDrinksMenu(bot, {
            chat: { id: chatId },
            from: query.from,
          } as BotMessage);
        }
      }
    }
  } catch (error) {
    console.error('Error quick decreasing quantity:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }).catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export async function handleFavorites(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = 'chat' in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;

  if (!chatId || !userId) {
    return;
  }

  try {
    const { message, keyboard } = await createFavoritesMessage(userId);

    if ('data' in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id, { text: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' }).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error('Error viewing favorites:', error);
    const errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';

    if ('data' in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export async function handleRecommendations(
  bot: BotInstance,
  msg: BotMessage | BotCallbackQuery
): Promise<void> {
  const chatId = 'chat' in msg ? msg.chat.id : msg.message?.chat.id;
  const userId = msg.from?.id;

  if (!chatId || !userId) {
    return;
  }

  try {
    const { message, keyboard } = await createRecommendationsMessage(userId);

    if ('data' in msg) {
      // –≠—Ç–æ callback query
      if (msg.message?.message_id) {
        bot
          .editMessageText(message, {
            chat_id: chatId,
            message_id: msg.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
          })
          .catch(() => {});
      }
      bot.answerCallbackQuery(msg.id, { text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' }).catch(() => {});
    } else {
      // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, message, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error('Error viewing recommendations:', error);
    const errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π';

    if ('data' in msg) {
      bot.answerCallbackQuery(msg.id, { text: errorMessage }).catch(() => {});
    } else {
      bot.sendMessage(chatId, errorMessage);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
export async function handleAddToFavorites(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('add_favorite_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);
  if (!item) {
    bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }).catch(() => {});
    return;
  }

  try {
    await databaseService.addToFavorites(userId, itemId);

    bot
      .answerCallbackQuery(query.id, {
        text: `${item.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`,
      })
      .catch(() => {});

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–∞
    const updatedQuery = { ...query, data: `item_${itemId}` };
    await handleItemSelection(bot, updatedQuery);
  } catch (error) {
    console.error('Error adding to favorites:', error);
    bot
      .answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' })
      .catch(() => {});
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export async function handleRemoveFromFavorites(
  bot: BotInstance,
  query: BotCallbackQuery
): Promise<void> {
  const userId = query.from?.id;
  const itemId = query.data?.replace('remove_favorite_', '');

  if (!userId || !itemId) {
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' }).catch(() => {});
    return;
  }

  const item = getItemById(itemId);
  if (!item) {
    bot.answerCallbackQuery(query.id, { text: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }).catch(() => {});
    return;
  }

  try {
    await databaseService.removeFromFavorites(userId, itemId);

    bot
      .answerCallbackQuery(query.id, {
        text: `${item.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`,
      })
      .catch(() => {});

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–∞
    const updatedQuery = { ...query, data: `item_${itemId}` };
    await handleItemSelection(bot, updatedQuery);
  } catch (error) {
    console.error('Error removing from favorites:', error);
    bot
      .answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' })
      .catch(() => {});
  }
}
