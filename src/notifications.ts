import { BotInstance, Order } from "./types";
import config from "./config";

class NotificationService {
  private bot: BotInstance;
  private notificationsChatId: string | undefined;
  private adminUserIds: number[];

  constructor(bot: BotInstance) {
    this.bot = bot;
    this.notificationsChatId = config.NOTIFICATIONS_CHAT_ID;
    this.adminUserIds = config.ADMIN_USER_IDS
      ? config.ADMIN_USER_IDS.split(",")
          .map((id) => parseInt(id.trim()))
          .filter((id) => !isNaN(id))
      : [];

    console.log(`üîî NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:`);
    console.log(`   üì¢ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${this.notificationsChatId || "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}`);
    console.log(`   üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${this.adminUserIds.length}`);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async notifyNewOrder(order: Order): Promise<void> {
    const message = this.formatNewOrderMessage(order);
    const keyboard = this.getOrderManagementKeyboard(order.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.notificationsChatId) {
      try {
        await this.bot.sendMessage(this.notificationsChatId, message, {
          reply_markup: keyboard,
          parse_mode: "HTML",
        });
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª`);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:", error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (const adminId of this.adminUserIds) {
      try {
        await this.bot.sendMessage(adminId, message, {
          reply_markup: keyboard,
          parse_mode: "HTML",
        });
        console.log(`üë®‚Äçüíº –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminId}:`, error);
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  async notifyStatusChange(order: Order, oldStatus: string): Promise<void> {
    const message = `
üîÑ <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω</b>

üì¶ –ó–∞–∫–∞–∑: #${order.id}
üë§ –ö–ª–∏–µ–Ω—Ç: ${order.userName}
üìä ${this.getStatusEmoji(oldStatus)} ‚Üí ${this.getStatusEmoji(order.status)}
üí∞ –°—É–º–º–∞: ${order.totalPrice}‚ÇΩ

<i>–°—Ç–∞—Ç—É—Å: ${this.getStatusText(oldStatus)} ‚Üí ${this.getStatusText(order.status)}</i>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.notificationsChatId) {
      try {
        await this.bot.sendMessage(this.notificationsChatId, message, {
          parse_mode: "HTML",
        });
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª`);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–Ω–∞–ª:", error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
    for (const adminId of this.adminUserIds) {
      try {
        await this.bot.sendMessage(adminId, message, {
          parse_mode: "HTML",
        });
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω—É ${adminId}:`,
          error
        );
      }
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  private formatNewOrderMessage(order: Order): string {
    let message = `
üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üì¶ –ó–∞–∫–∞–∑: #${order.id}
üë§ –ö–ª–∏–µ–Ω—Ç: ${order.userName}
üìÖ –í—Ä–µ–º—è: ${this.formatDate(order.createdAt)}
üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(order.status)} ${this.getStatusText(order.status)}

üõí <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
`;

    order.items.forEach((item, index) => {
      const subtotal = item.menuItem.price * item.quantity;
      message += `${index + 1}. <b>${item.menuItem.name}</b>\n`;
      message += `   üí∞ ${item.menuItem.price}‚ÇΩ √ó ${item.quantity} = <b>${subtotal}‚ÇΩ</b>\n`;
    });

    message += `\nüí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞: ${order.totalPrice}‚ÇΩ</b>`;

    return message;
  }

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
  private getOrderManagementKeyboard(orderId: string) {
    return {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `admin_confirm_${orderId}` },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `admin_reject_${orderId}` },
        ],
        [
          { text: "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data: `admin_preparing_${orderId}` },
          { text: "üéâ –ì–æ—Ç–æ–≤–æ", callback_data: `admin_ready_${orderId}` },
        ],
        [{ text: "üìã –î–µ—Ç–∞–ª–∏", callback_data: `admin_details_${orderId}` }],
      ],
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  private getStatusEmoji(status: string): string {
    const statusMap: { [key: string]: string } = {
      pending: "‚è≥",
      confirmed: "‚úÖ",
      preparing: "üë®‚Äçüç≥",
      ready: "üéâ",
      delivered: "‚úÖ",
    };
    return statusMap[status] || "‚ùì";
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  private getStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      pending: "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
      confirmed: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
      preparing: "–ì–æ—Ç–æ–≤–∏—Ç—Å—è",
      ready: "–ì–æ—Ç–æ–≤",
      delivered: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
    };
    return statusMap[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private formatDate(date: Date): string {
    return date.toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  isAdmin(userId: number): boolean {
    return this.adminUserIds.includes(userId);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  isConfigured(): boolean {
    return !!(this.notificationsChatId || this.adminUserIds.length > 0);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  getStatus(): string {
    if (!this.isConfigured()) {
      return "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã";
    }

    let status = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n";
    if (this.notificationsChatId) {
      status += `üì¢ –ö–∞–Ω–∞–ª: ${this.notificationsChatId}\n`;
    }
    if (this.adminUserIds.length > 0) {
      status += `üë®‚Äçüíº –ê–¥–º–∏–Ω–æ–≤: ${this.adminUserIds.length}`;
    }
    return status;
  }
}

export default NotificationService;
