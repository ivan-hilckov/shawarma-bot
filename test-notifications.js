const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
console.log("BOT_TOKEN:", process.env.BOT_TOKEN ? "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù");
console.log("NOTIFICATIONS_CHAT_ID:", process.env.NOTIFICATIONS_CHAT_ID || "‚ùå –ù–ï –ù–ê–ô–î–ï–ù");
console.log("ADMIN_USER_IDS:", process.env.ADMIN_USER_IDS || "‚ùå –ù–ï –ù–ê–ô–î–ï–ù");

if (!process.env.BOT_TOKEN || process.env.BOT_TOKEN === "YOUR_BOT_TOKEN_HERE") {
  console.log("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

async function testNotifications() {
  try {
    console.log("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await bot.getMe();
    console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (
      process.env.NOTIFICATIONS_CHAT_ID &&
      process.env.NOTIFICATIONS_CHAT_ID !== "-1001234567890"
    ) {
      console.log("\nüì¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");

      const testMessage = `
üß™ <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>

üì¶ –ó–∞–∫–∞–∑: #TEST123
üë§ –ö–ª–∏–µ–Ω—Ç: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏

üõí <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
1. <b>–®–∞—É—Ä–º–∞ –∫–ª–∞—Å—Å–∏–∫ –±–æ–ª—å—à–∞—è</b>
   üí∞ 270‚ÇΩ √ó 1 = <b>270‚ÇΩ</b>

üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞: 270‚ÇΩ</b>

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</i>
      `;

      const keyboard = {
        inline_keyboard: [
          [
            { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "admin_confirm_TEST123" },
            { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: "admin_reject_TEST123" },
          ],
          [
            { text: "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data: "admin_preparing_TEST123" },
            { text: "üéâ –ì–æ—Ç–æ–≤–æ", callback_data: "admin_ready_TEST123" },
          ],
          [{ text: "üìã –î–µ—Ç–∞–ª–∏", callback_data: "admin_details_TEST123" }],
        ],
      };

      await bot.sendMessage(process.env.NOTIFICATIONS_CHAT_ID, testMessage, {
        parse_mode: "HTML",
        reply_markup: keyboard,
      });

      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!");
    } else {
      console.log("‚ö†Ô∏è NOTIFICATIONS_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (process.env.ADMIN_USER_IDS && process.env.ADMIN_USER_IDS !== "123456789,987654321") {
      const adminIds = process.env.ADMIN_USER_IDS.split(",").map((id) => parseInt(id.trim()));
      console.log(
        `\nüë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (${adminIds.length} —á–µ–ª.)...`
      );

      for (const adminId of adminIds) {
        try {
          await bot.sendMessage(
            adminId,
            "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
          );
          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
        }
      }
    } else {
      console.log("‚ö†Ô∏è ADMIN_USER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    }

    console.log("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

testNotifications();
